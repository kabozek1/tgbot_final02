from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
import time
import logging
import os
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession # Import async SQLAlchemy

from config import get_settings
from plugin_loader import register_plugins
from models.init_db import init_db
from utils.plugin_settings import load_all_plugin_settings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from logging_config import get_logger
logger = get_logger(__name__)


# Get bot token from config
settings = get_settings()
print(f"DEBUG: Token before Bot init: {settings.TELEGRAM_BOT_TOKEN[:10]}...{settings.TELEGRAM_BOT_TOKEN[-10:]} (length: {len(settings.TELEGRAM_BOT_TOKEN)})", flush=True)
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# antiflood logic moved to src/plugins/antiflood_plugin.py ‚Äî see plugin_loader for registration


@dp.message(Command("start"))
async def start_handler(message: Message):
    """Handle /start command."""
    # Start command received
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")


@dp.message(Command("help"))
async def help_handler(message: Message):
    """Handle /help command."""
    # Help command received
    
    help_text = """ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
ping - –û—Ç–≤–µ—Ç–∏—Ç—å "pong"

<b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤):</b>
/warn - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/mute [–º–∏–Ω—É—Ç—ã] - –ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω)
/unmute - –†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/kick - –ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/ban - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/delete - –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç –∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è)

<b>–†–µ–ø—É—Ç–∞—Ü–∏—è:</b>
+ - –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
- - –£–º–µ–Ω—å—à–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/rep - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏

<b>–û–ø—Ä–æ—Å—ã:</b>
/poll –í–æ–ø—Ä–æ—Å;–í–∞—Ä–∏–∞–Ω—Ç1;–í–∞—Ä–∏–∞–Ω—Ç2;... - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏

<b>–†–µ–∞–∫—Ü–∏–∏:</b>
üëç - –õ–∞–π–∫ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
üëé - –î–∏–∑–ª–∞–π–∫ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/reactions - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ê–Ω—Ç–∏—Ñ–ª—É–¥ - –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ø–∞–º (5+ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 10 —Å–µ–∫)
‚Ä¢ –ö–∞–ø—á–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤/—Å—Å—ã–ª–æ–∫"""
    
    await message.answer(help_text, parse_mode="HTML")






async def main():
    """Main function to start the bot."""
    # Initializing database
    corrected_db_url = await init_db(settings.DATABASE_URL)

    # Centralized AsyncSessionLocal initialization
    async_engine = create_async_engine(corrected_db_url)
    AsyncSessionLocal = async_sessionmaker(async_engine, expire_on_commit=False)
    # AsyncSessionLocal initialized

    # Initialize system monitoring
    try:
        from plugins.admin_panel.system_monitor import set_bot_start_time
        set_bot_start_time()
        # System monitoring initialized
    except Exception as e:
        logger.warning(f"Failed to initialize system monitoring: {e}")

    # Load all plugin settings from database
    # Loading plugin settings from database
    all_settings = await load_all_plugin_settings(AsyncSessionLocal)
    
    # Register plugins AFTER main handlers, passing AsyncSessionLocal
    # Registering plugins
    register_plugins(dp, bot, AsyncSessionLocal)
    
    # Global debug message handler - MUST be registered AFTER plugins to not interfere
    @dp.message()
    async def global_debug_message_handler(message: Message):
        logger.debug(f"GLOBAL_DEBUG: Unhandled message from={message.from_user.id} ct={message.content_type} text={message.text}")

    # Starting bot
    
    try:
        # Start polling - limit updates to necessary types for performance
        allowed_updates = [
            "message",
            "chat_member",
            "my_chat_member",  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ –±–æ—Ç–µ –∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞—Ö
            "callback_query",
            "poll",
            "poll_answer",
        ]
        await dp.start_polling(bot, allowed_updates=allowed_updates)
    except Exception as e:
        logger.error(f"Error in main: {e}")
        raise


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())