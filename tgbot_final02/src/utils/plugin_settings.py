"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–ª–∞–≥–∏–Ω–æ–≤
"""

import logging
from typing import Dict, Any, Optional
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy.future import select
from sqlalchemy import update
from models.base import PluginSettings

logger = logging.getLogger(__name__)

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
DEFAULT_SETTINGS = {
    "antispam": {
        "enabled": True,
        "max_messages": 5,
        "window_seconds": 10
    },
    "antimat": {
        "enabled": True,
        "warnings_enabled": True,
        "blacklist_words": ["–¥—É—Ä–∞–∫", "–ª–æ—Ö"],
        "blacklist_links": ["t.me/", "http://", "https://"]
    },
    "warn": {
        "max_warnings": 3,
        "warning_expiry_days": 30
    },
    "reputation": {
        "enabled": True,
        "cooldown_seconds": 30,
        "max_daily_actions": 10
    },
    "poll": {
        "enabled": True,
        "max_options": 10,
        "auto_close_hours": 24
    },
    "captcha": {
        "enabled": True,
        "timeout_seconds": 300,
        "max_attempts": 3
    }
}


async def load_plugin_settings(plugin_name: str, async_session_local: async_sessionmaker) -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –∏–∑ –ë–î.
    –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö.
    
    Args:
        plugin_name: –ò–º—è –ø–ª–∞–≥–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'antispam', 'antimat')
        async_session_local: –°–µ—Å—Å–∏—è –ë–î
    
    Returns:
        Dict —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–ª–∞–≥–∏–Ω–∞
    """
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ debug)
    logger.debug(f"üîç load_plugin_settings plugin='{plugin_name}', type={type(async_session_local)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    if not hasattr(async_session_local, '__call__'):
        logger.error(f"‚ùå async_session_local is not callable! Type: {type(async_session_local)}")
        logger.error(f"‚ùå Looks like a Bot was passed instead of async_sessionmaker")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return DEFAULT_SETTINGS.get(plugin_name, {})
    
    try:
        logger.debug(f"üîç About to call async_session_local() - type: {type(async_session_local)}")
        async with async_session_local() as session:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
            result = await session.execute(
                select(PluginSettings).where(PluginSettings.plugin_name == plugin_name)
            )
            plugin_settings = result.scalar_one_or_none()
            
            if plugin_settings:
                logger.debug(f"‚úÖ Loaded settings for plugin '{plugin_name}' from DB")
                return plugin_settings.settings
            
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            if plugin_name not in DEFAULT_SETTINGS:
                logger.warning(f"‚ö†Ô∏è No default settings found for plugin '{plugin_name}'")
                return {}
            
            default_settings = DEFAULT_SETTINGS[plugin_name].copy()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
            new_settings = PluginSettings(
                plugin_name=plugin_name,
                settings=default_settings
            )
            session.add(new_settings)
            await session.commit()
            
            logger.debug(f"‚úÖ Created default settings for plugin '{plugin_name}' and saved to DB")
            return default_settings
            
    except Exception as e:
        logger.error(f"‚ùå Error loading settings for plugin '{plugin_name}': {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return DEFAULT_SETTINGS.get(plugin_name, {})


async def save_plugin_settings(plugin_name: str, settings: Dict[str, Any], async_session_local: async_sessionmaker) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –≤ –ë–î.
    
    Args:
        plugin_name: –ò–º—è –ø–ª–∞–≥–∏–Ω–∞
        settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        async_session_local: –°–µ—Å—Å–∏—è –ë–î
    
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        async with async_session_local() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            result = await session.execute(
                select(PluginSettings).where(PluginSettings.plugin_name == plugin_name)
            )
            plugin_settings = result.scalar_one_or_none()
            
            if plugin_settings:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await session.execute(
                    update(PluginSettings)
                    .where(PluginSettings.plugin_name == plugin_name)
                    .values(settings=settings)
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                new_settings = PluginSettings(
                    plugin_name=plugin_name,
                    settings=settings
                )
                session.add(new_settings)
            
            await session.commit()
            logger.info(f"‚úÖ Settings saved for plugin '{plugin_name}'")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Error saving settings for plugin '{plugin_name}': {e}")
        return False


async def load_all_plugin_settings(async_session_local: async_sessionmaker) -> Dict[str, Dict[str, Any]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    
    Args:
        async_session_local: –°–µ—Å—Å–∏—è –ë–î
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
    """
    all_settings = {}
    
    for plugin_name in DEFAULT_SETTINGS.keys():
        settings = await load_plugin_settings(plugin_name, async_session_local)
        all_settings[plugin_name] = settings
        logger.debug(f"‚úÖ Loaded settings for plugin '{plugin_name}'")
    
    logger.info(f"‚úÖ Loaded settings for {len(all_settings)} plugins")
    return all_settings


def get_plugin_setting(settings: Dict[str, Any], key: str, default: Any = None) -> Any:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
    
    Args:
        settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        key: –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    Returns:
        –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ default
    """
    return settings.get(key, default)


def update_plugin_setting(settings: Dict[str, Any], key: str, value: Any) -> Dict[str, Any]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ.
    
    Args:
        settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        key: –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    settings_copy = settings.copy()
    settings_copy[key] = value
    return settings_copy
