from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
import asyncio
import logging
from sqlalchemy.ext.asyncio import async_sessionmaker

from utils.plugin_settings import load_plugin_settings

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∏–∑ –ë–î)
ANTIMAT_ENABLED = True
ANTIMAT_WARNINGS_ENABLED = True
blacklist_words = []
blacklist_links = []


def get_antimat_config():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–Ω—Ç–∏–º–∞—Ç–∞ –∏–∑ –ë–î"""
    try:
        from utils.plugin_settings import load_plugin_settings
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return {
            "enabled": ANTIMAT_ENABLED,
            "warnings_enabled": ANTIMAT_WARNINGS_ENABLED,
            "blacklist_words": blacklist_words,
            "blacklist_links": blacklist_links
        }
    except ImportError:
        # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        return {
            "enabled": True,
            "warnings_enabled": True,
            "blacklist_words": ["–¥—É—Ä–∞–∫", "–ª–æ—Ö"],
            "blacklist_links": ["t.me/", "http://", "https://"]
        }


async def initialize_antimat_settings(async_session_local: async_sessionmaker):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏–º–∞—Ç–∞ –∏–∑ –ë–î"""
    global ANTIMAT_ENABLED, ANTIMAT_WARNINGS_ENABLED, blacklist_words, blacklist_links
    
    logger.info(f"üîß ANTIMAT_INIT: Starting antimat settings initialization")
    
    try:
        settings = await load_plugin_settings("antimat", async_session_local)
        logger.info(f"üîç ANTIMAT_INIT: Loaded settings from DB: {settings}")
        
        ANTIMAT_ENABLED = settings.get("enabled", True)
        ANTIMAT_WARNINGS_ENABLED = settings.get("warnings_enabled", True)
        blacklist_words = settings.get("blacklist_words", ["–¥—É—Ä–∞–∫", "–ª–æ—Ö"])
        blacklist_links = settings.get("blacklist_links", ["t.me/", "http://", "https://"])
        
        logger.info(f"‚úÖ ANTIMAT_INIT: Settings initialized: enabled={ANTIMAT_ENABLED}, warnings={ANTIMAT_WARNINGS_ENABLED}")
        logger.info(f"‚úÖ ANTIMAT_INIT: Blacklist words: {blacklist_words}")
        logger.info(f"‚úÖ ANTIMAT_INIT: Blacklist links: {blacklist_links}")
    except Exception as e:
        logger.error(f"‚ùå ANTIMAT_INIT: Error initializing antimat settings: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ANTIMAT_ENABLED = True
        ANTIMAT_WARNINGS_ENABLED = True
        blacklist_words = ["–¥—É—Ä–∞–∫", "–ª–æ—Ö"]
        blacklist_links = ["t.me/", "http://", "https://"]
        logger.info(f"üîÑ ANTIMAT_INIT: Using default values: words={blacklist_words}, links={blacklist_links}")


async def sync_antimat_settings(async_session_local: async_sessionmaker):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏–º–∞—Ç–∞ —Å –ë–î"""
    global ANTIMAT_ENABLED, ANTIMAT_WARNINGS_ENABLED, blacklist_words, blacklist_links
    
    logger.info(f"üîÑ ANTIMAT_SYNC: Starting antimat settings synchronization")
    
    try:
        settings = await load_plugin_settings("antimat", async_session_local)
        logger.info(f"üîç ANTIMAT_SYNC: Loaded settings from DB: {settings}")
        
        ANTIMAT_ENABLED = settings.get("enabled", True)
        ANTIMAT_WARNINGS_ENABLED = settings.get("warnings_enabled", True)
        blacklist_words = settings.get("blacklist_words", ["–¥—É—Ä–∞–∫", "–ª–æ—Ö"])
        blacklist_links = settings.get("blacklist_links", ["t.me/", "http://", "https://"])
        
        logger.info(f"‚úÖ ANTIMAT_SYNC: Settings synced: enabled={ANTIMAT_ENABLED}, warnings={ANTIMAT_WARNINGS_ENABLED}")
        logger.info(f"‚úÖ ANTIMAT_SYNC: Updated blacklist_words: {blacklist_words}")
        logger.info(f"‚úÖ ANTIMAT_SYNC: Updated blacklist_links: {blacklist_links}")
    except Exception as e:
        logger.error(f"‚ùå ANTIMAT_SYNC: Error syncing antimat settings: {e}")


def is_blacklisted_content(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    logger.info(f"üîç BLACKLIST_CHECK: Checking text: '{text[:50]}...' (enabled={ANTIMAT_ENABLED})")
    logger.info(f"üîç BLACKLIST_CHECK: Current blacklist_words: {blacklist_words}")
    logger.info(f"üîç BLACKLIST_CHECK: Current blacklist_links: {blacklist_links}")
    
    if not text or not ANTIMAT_ENABLED:
        logger.info(f"üîç BLACKLIST_CHECK: Skipping check - text empty or antimat disabled")
        return False
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
    commands = [
        "/start", "/help", "/ping", "/set_name_topic", "/stats", "/rep", "/top",
        "/delete", "/poll", "/mute", "/unmute", "/invites", "/kick", "/ban", "/warn", "/admin"
    ]
    
    text_lower = text.lower().strip()
    for command in commands:
        if text_lower.startswith(command.lower()):
            logger.info(f"üîç BLACKLIST_CHECK: Skipping command: {command}")
            return False
    
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    for word in blacklist_words:
        if word in text_lower:
            logger.info(f"üö´ BLACKLIST_MATCH: Found blacklisted word '{word}' in text")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    for link in blacklist_links:
        if link in text_lower:
            logger.info(f"üö´ BLACKLIST_MATCH: Found blacklisted link '{link}' in text")
            return True
    
    logger.info(f"‚úÖ BLACKLIST_CHECK: Text is clean")
    return False

async def on_message_filter(message: Message):
    """Filter messages for blacklisted content."""
    logger.info(f"üîç MESSAGE_FILTER: Processing message from user {message.from_user.id} in chat {message.chat.id}")
    logger.info(f"üîç MESSAGE_FILTER: Message text: '{message.text[:100] if message.text else 'No text'}...'")
    
    if not is_blacklisted_content(message.text):
        logger.info(f"‚úÖ MESSAGE_FILTER: Message passed blacklist check")
        return
    
    logger.warning(f"üö´ MESSAGE_FILTER: Message contains blacklisted content, attempting to delete")
    
    try:
        await message.delete()
        logger.info(f"‚úÖ MESSAGE_FILTER: Successfully deleted message {message.message_id}")
        
        if ANTIMAT_WARNINGS_ENABLED:
            warning_msg = await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
            logger.info(f"üì¢ MESSAGE_FILTER: Sent warning message {warning_msg.message_id}")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            async def delete_warning():
                await asyncio.sleep(3)
                try:
                    await warning_msg.delete()
                    logger.info(f"üóëÔ∏è MESSAGE_FILTER: Deleted warning message {warning_msg.message_id}")
                except (TelegramBadRequest, TelegramForbiddenError):
                    logger.debug(f"Could not delete warning message {warning_msg.message_id}")
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            asyncio.create_task(delete_warning())
        
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        logger.warning(f"‚ùå MESSAGE_FILTER: Cannot delete message {message.message_id}: {e}")
        # If can't delete, just send warning
        if ANTIMAT_WARNINGS_ENABLED:
            warning_msg = await message.answer("‚ö†Ô∏è –ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!")
            logger.info(f"üì¢ MESSAGE_FILTER: Sent warning message {warning_msg.message_id} (could not delete original)")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            async def delete_warning():
                await asyncio.sleep(3)
                try:
                    await warning_msg.delete()
                    logger.info(f"üóëÔ∏è MESSAGE_FILTER: Deleted warning message {warning_msg.message_id}")
                except (TelegramBadRequest, TelegramForbiddenError):
                    logger.debug(f"Could not delete warning message {warning_msg.message_id}")
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            asyncio.create_task(delete_warning())
        
    except Exception as e:
        logger.error(f"‚ùå MESSAGE_FILTER: Blacklist plugin error: {e}")


class BlacklistMiddleware:
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    
    def __init__(self):
        self.name = "BlacklistMiddleware"
    
    async def __call__(self, handler, event, data):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(event, 'text') and event.text:
            # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
            commands = [
                "/start", "/help", "/ping", "/set_name_topic", "/stats", "/rep", "/top",
                "/delete", "/poll", "/mute", "/unmute", "/invites", "/kick", "/ban", "/warn", "/admin"
            ]
            
            text_lower = event.text.lower().strip()
            is_command = any(text_lower.startswith(command.lower()) for command in commands)
            
            if not is_command and is_blacklisted_content(event.text):
                logger.warning(f"üö´ BLACKLIST_MIDDLEWARE: Message contains blacklisted content, attempting to delete")
                
                try:
                    await event.delete()
                    logger.info(f"‚úÖ BLACKLIST_MIDDLEWARE: Successfully deleted message {event.message_id}")
                    
                    if ANTIMAT_WARNINGS_ENABLED:
                        warning_msg = await event.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
                        logger.info(f"üì¢ BLACKLIST_MIDDLEWARE: Sent warning message {warning_msg.message_id}")
                        
                        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                        async def delete_warning():
                            await asyncio.sleep(3)
                            try:
                                await warning_msg.delete()
                                logger.info(f"üóëÔ∏è BLACKLIST_MIDDLEWARE: Deleted warning message {warning_msg.message_id}")
                            except (TelegramBadRequest, TelegramForbiddenError):
                                logger.debug(f"Could not delete warning message {warning_msg.message_id}")
                                pass
                        
                        asyncio.create_task(delete_warning())
                    
                    # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    return
                    
                except (TelegramBadRequest, TelegramForbiddenError) as e:
                    logger.warning(f"‚ùå BLACKLIST_MIDDLEWARE: Cannot delete message {event.message_id}: {e}")
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    if ANTIMAT_WARNINGS_ENABLED:
                        warning_msg = await event.answer("‚ö†Ô∏è –ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!")
                        logger.info(f"üì¢ BLACKLIST_MIDDLEWARE: Sent warning message {warning_msg.message_id} (could not delete original)")
                        
                        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                        async def delete_warning():
                            await asyncio.sleep(3)
                            try:
                                await warning_msg.delete()
                                logger.info(f"üóëÔ∏è BLACKLIST_MIDDLEWARE: Deleted warning message {warning_msg.message_id}")
                            except (TelegramBadRequest, TelegramForbiddenError):
                                logger.debug(f"Could not delete warning message {warning_msg.message_id}")
                                pass
                        
                        asyncio.create_task(delete_warning())
                
                except Exception as e:
                    logger.error(f"‚ùå BLACKLIST_MIDDLEWARE: Blacklist middleware error: {e}")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        return await handler(event, data)


def register(dp: Dispatcher, bot, async_session_local: async_sessionmaker):
    """Register blacklist plugin middleware."""
    logger.info(f"üîß BLACKLIST_REGISTER: Starting blacklist plugin registration")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    import asyncio
    asyncio.create_task(initialize_antimat_settings(async_session_local))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    dp.message.middleware(BlacklistMiddleware())
    
    logger.info(f"‚úÖ BLACKLIST_REGISTER: Blacklist middleware registered successfully")
