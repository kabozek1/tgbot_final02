
import asyncio
import re
from datetime import datetime, timedelta
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
import time
from sqlalchemy.ext.asyncio import async_sessionmaker # Added import
from config import get_settings

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# TODO: Replace with Redis/DB in production
reputation = {}  # {user_id: score}

# Rate limiting: allow 1 rep action per actor per 30s
last_rep_action = {}  # {(actor_id, target_id): timestamp}


async def delete_command_message(message: Message):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        print(f"[DEBUG] Attempting to delete message {message.message_id} from user {message.from_user.id}")
        await message.delete()
        print(f"[DEBUG] Successfully deleted message {message.message_id}")
    except (TelegramBadRequest, TelegramForbiddenError) as e:
        print(f"[DEBUG] Failed to delete message {message.message_id}: {e}")
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è


async def send_and_auto_delete(message: Message, text: str, delay: int = 3):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        sent_message = await message.answer(text)
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(delete_system_message_after_delay(sent_message, delay))
        return sent_message
    except Exception:
        return None


async def delete_system_message_after_delay(sent_message: Message, delay: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        await asyncio.sleep(delay)
        await sent_message.delete()
    except (TelegramBadRequest, TelegramForbiddenError):
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è


async def extract_user_info(message: Message, bot=None, async_session_local=None):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞:
    1. @username —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±)
    2. Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (user_id, username) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
    """
    print(f"[DEBUG] extract_user_info called by user {message.from_user.id} (@{message.from_user.username})")
    print(f"[DEBUG] Message text: {message.text}")
    
    # –°–ø–æ—Å–æ–± 1: @username –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±)
    if message.text:
        # –ò—â–µ–º @username –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã
        username_match = re.search(r'@(\w+)', message.text)
        if username_match:
            username = username_match.group(1)
            print(f"[DEBUG] Found username mention: @{username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–∞–º–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã
            if username.lower() == (message.from_user.username or "").lower():
                print(f"[DEBUG] User mentioned themselves, returning their own info")
                return message.from_user.id, message.from_user.username or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ username
            if async_session_local:
                try:
                    from sqlalchemy.future import select
                    from models.base import User
                    
                    async with async_session_local() as session:
                        result = await session.execute(
                            select(User).where(User.username == username)
                        )
                        user = result.scalar_one_or_none()
                        if user:
                            print(f"[DEBUG] Found user in DB: {user.telegram_id} (@{user.username})")
                            return user.telegram_id, user.username or user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                except Exception as e:
                    print(f"[DEBUG] Failed to get user from DB: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ username
            print(f"[DEBUG] Cannot resolve username @{username} to user_id, returning username only")
            return None, username
    
    # –°–ø–æ—Å–æ–± 2: Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
        print(f"[DEBUG] Found reply target: {target_user.id} (@{target_user.username})")
        return target_user.id, target_user.username or target_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    print(f"[DEBUG] No user info found")
    return None, None


async def on_rep_mark(message: Message):
    """Handle reputation changes from replies."""
    try:
        # Get user info
        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id
        actor_id = message.from_user.id
        
        # Prevent users from changing their own reputation
        if actor_id == target_user_id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return
        
        # Prevent changing bot's reputation
        if target_user.is_bot:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –±–æ—Ç—É!")
            return
        
        # Rate limiting: check if actor already acted on this target recently
        rate_key = (actor_id, target_user_id)
        current_time = time.time()
        if rate_key in last_rep_action and current_time - last_rep_action[rate_key] < 30:
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥.")
            return
        
        # Initialize reputation if user doesn't exist
        if target_user_id not in reputation:
            reputation[target_user_id] = 0
        
        # Change reputation based on trigger
        trigger = message.text.strip()
        if trigger in ("+", "üëç"):
            reputation[target_user_id] += 1
        elif trigger in ("-", "üëé"):
            reputation[target_user_id] -= 1
        
        # Update rate limiting timestamp
        last_rep_action[rate_key] = current_time
        
        # Send confirmation
        username = target_user.username or target_user.first_name or f"ID {target_user_id}"
        await message.answer(f"–†–µ–ø—É—Ç–∞—Ü–∏—è @{username}: {reputation[target_user_id]}")
        
        # Delete the trigger message (+, -, üëç, üëé)
        try:
            await message.delete()
        except (TelegramBadRequest, TelegramForbiddenError):
            pass # Ignore if can't delete
            
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏")
        print(f"Reputation change error: {e}")


async def handle_rep_cmd(message: Message, bot):
    """Show user's reputation by replying to their message or using @username."""
    settings = get_settings()
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await delete_command_message(message)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        target_user_id, username = await extract_user_info(message, bot, async_session_local)
        
        if not target_user_id and not username:
            await send_and_auto_delete(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username.", settings.REP_MESSAGE_DELETE_DELAY)
            return
        
        if target_user_id:
            # Get reputation (default to 0)
            user_reputation = reputation.get(target_user_id, 0)
            # Send reputation info
            await send_and_auto_delete(message, f"üìä –†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {user_reputation}", settings.REP_MESSAGE_DELETE_DELAY)
        else:
            # –ï—Å–ª–∏ user_id –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ, –Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏—è 0
            await send_and_auto_delete(message, f"üìä –†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: 0 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ)", settings.REP_MESSAGE_DELETE_DELAY)
        
    except Exception as e:
        await send_and_auto_delete(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", settings.REP_MESSAGE_DELETE_DELAY)
        print(f"Reputation command error: {e}")


async def handle_top_cmd(message: Message):
    """Show top 5 users by reputation."""
    try:
        print(f"[DEBUG] handle_top_cmd called for user {message.from_user.id}")
        if not reputation:
            await message.answer("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç")
            # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç
            await delete_command_message(message)
            return
        
        # Sort users by reputation descending
        sorted_users = sorted(reputation.items(), key=lambda x: x[1], reverse=True)
        
        # Get top 5
        top_users = sorted_users[:5]
        
        # Format the rating text
        result_text = "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:\n"
        
        for i, (user_id, score) in enumerate(top_users, 1):
            # TODO: Fetch username for better display instead of just ID
            result_text += f"{i}) ID {user_id} ‚Äî {score}\n"
        
        await message.answer(result_text)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await delete_command_message(message)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞")
        print(f"Top command error: {e}")
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await delete_command_message(message)


def register(dp: Dispatcher, bot, async_session_local: async_sessionmaker):
    """Register reputation plugin handlers."""
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
    async def rep_command_wrapper(message: Message):
        return await handle_rep_cmd(message, bot)
    
    async def top_command_wrapper(message: Message):
        return await handle_top_cmd(message)
    
    # Register handler for text replies (+, -, üëç, üëé)
    dp.message.register(on_rep_mark, lambda m: m.text and m.text.strip() in ("+", "-", "üëç", "üëé") and m.reply_to_message is not None)
    
    # Register command handlers
    dp.message.register(rep_command_wrapper, Command(commands=["rep"]))
    dp.message.register(top_command_wrapper, Command(commands=["top"]))
