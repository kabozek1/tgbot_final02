"""
–ü–ª–∞–≥–∏–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫
"""

import logging
from datetime import datetime, timedelta
from typing import List, Tuple, Union

from aiogram import Bot, Dispatcher
from aiogram.types import ChatMemberUpdated, Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sqlalchemy import select, func, and_, desc
from sqlalchemy.ext.asyncio import async_sessionmaker

from models.base import InviteLink, InviteClick
from plugins.admin_panel.message_utils import edit_message
from utils.admin_utils import IsAdmin

logger = logging.getLogger(__name__)


async def handle_invite_chat_member(update: ChatMemberUpdated, async_session_local: async_sessionmaker):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫
    """
    try:
        # Processing ChatMemberUpdated silently for performance
        
        old_status = update.old_chat_member.status
        new_status = update.new_chat_member.status
        user_id = update.new_chat_member.user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º link_url, name –∏ creator_id
        determined_link_url = None
        determined_link_name = None
        determined_link_creator_id = None

        if update.invite_link:
            determined_link_url = update.invite_link.invite_link
            determined_link_name = update.invite_link.name or f"–°—Å—ã–ª–∫–∞ {determined_link_url[-8:]}"
            determined_link_creator_id = update.invite_link.creator.id if update.invite_link.creator else None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if determined_link_url.startswith('https://t.me/+'):
                hash_part = determined_link_url[len('https://t.me/+'):len('https://t.me/+')+8]
                # Invite link detected
            else:
                hash_part = determined_link_url[-8:] if len(determined_link_url) >= 8 else determined_link_url
                # Invite link detected
        elif update.chat.username:
            determined_link_url = f"virtual_link:{update.chat.username}"
            determined_link_name = f"–ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞: @{update.chat.username}"
            determined_link_creator_id = None  # –î–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è
            hash_part = f"@{update.chat.username}"
            # Virtual invite link detected
        else:
            logger.warning(f"‚ö†Ô∏è User {user_id} joined but no invite link or public group username provided. Chat ID: {update.chat.id}")
            return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Å—ã–ª–∫—É
        
        # User status change tracked silently
        
        async with async_session_local() as session:
            if old_status in ["left", "kicked", "restricted"] and new_status in ["member", "administrator", "creator", "restricted"] and determined_link_url:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
                # User joined via invite link
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ö–µ—à –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if determined_link_url.startswith('https://t.me/+'):
                    display_hash = determined_link_url[len('https://t.me/+'):len('https://t.me/+')+8]
                elif determined_link_url.startswith('virtual_link:'):
                    display_hash = f"@{determined_link_url[13:]}"
                else:
                    display_hash = determined_link_url[-8:] if len(determined_link_url) >= 8 else determined_link_url
                
                # Statistics tracking enabled
                
                now = datetime.utcnow()
                
                # Processing invite link
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ
                result = await session.execute(
                    select(InviteLink).where(InviteLink.link_url == determined_link_url)
                )
                invite_link_obj = result.scalar_one_or_none()
                
                if not invite_link_obj:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É
                    # Creating new invite link record
                    
                    invite_link_obj = InviteLink(
                        link_url=determined_link_url,
                        name=determined_link_name,
                        creator_id=determined_link_creator_id,
                        first_click=now,
                        last_click=now,
                        total_clicks=1
                    )
                    session.add(invite_link_obj)
                    # Added new InviteLink to session
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                    # Updating existing invite link
                    
                    invite_link_obj.last_click = now
                    invite_link_obj.total_clicks += 1
                    # Total clicks updated
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–ª–∏–∫–µ
                # Creating invite click record
                invite_click = InviteClick(
                    user_id=user_id,
                    link_url=determined_link_url,
                    join_date=now
                )
                session.add(invite_click)
                # Added InviteClick to session
                
                try:
                    await session.commit()
                    # Successfully committed to database
                except Exception as commit_error:
                    logger.error(f"‚ùå Database commit failed: {commit_error}")
                    await session.rollback()
                    raise
                    
            elif old_status in ["member", "administrator"] and new_status in ["left", "kicked"]:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç
                # User left the chat
                
                if invite_link and invite_link.invite_link:
                    link_url = invite_link.invite_link
                    now = datetime.utcnow()
                    
                    logger.info(f"üîÑ Processing leave for invite link: {link_url}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ –∫–ª–∏–∫–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤—ã—Ö–æ–¥–∞
                    result = await session.execute(
                        select(InviteClick).where(
                            and_(
                                InviteClick.user_id == user_id,
                                InviteClick.link_url == link_url,
                                InviteClick.left_date.is_(None)
                            )
                        ).order_by(desc(InviteClick.join_date)).limit(1)
                    )
                    invite_click = result.scalar_one_or_none()
                    
                    if invite_click:
                        logger.info(f"üìù Found invite click record, updating leave date")
                        invite_click.left_date = now
                        
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—à–µ–¥—à–∏—Ö –≤ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ
                        result = await session.execute(
                            select(InviteLink).where(InviteLink.link_url == link_url)
                        )
                        invite_link_obj = result.scalar_one_or_none()
                        if invite_link_obj:
                            logger.info(f"üìä Incrementing left count for invite link")
                            invite_link_obj.left_count += 1
                        
                        try:
                            await session.commit()
                            logger.info(f"‚úÖ Successfully recorded leave: {link_url} for user {user_id}")
                        except Exception as commit_error:
                            logger.error(f"‚ùå Database commit failed for leave: {commit_error}")
                            await session.rollback()
                            raise
                    else:
                        logger.warning(f"‚ö†Ô∏è No invite click record found for user {user_id} and link {link_url}")
                else:
                    logger.warning(f"‚ö†Ô∏è User {user_id} left but no invite link provided")
            else:
                logger.debug(f"üîÑ Status change not relevant for tracking: {old_status} -> {new_status}")
                        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_invite_chat_member: {e}")
        logger.exception("Full traceback:")  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


def generate_activity_graph(data: List[Tuple[str, int]]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≤–∏–¥–µ ASCII-—Å—Ç–æ–ª–±–∏–∫–æ–≤
    
    Args:
        data: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–¥–∞—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    """
    if not data:
        return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
    
    max_count = max(count for _, count in data) if data else 1
    graph_lines = []
    
    for date_str, count in data:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É —Å—Ç–æ–ª–±–∏–∫–∞ (–æ—Ç 1 –¥–æ 9 —Å–∏–º–≤–æ–ª–æ–≤)
        bar_length = max(1, int((count / max_count) * 9)) if max_count > 0 else 1
        bar = "‚ñá" * bar_length
        graph_lines.append(f"[{date_str}] {bar} {count}")
    
    return "\n".join(graph_lines)


async def build_invite_card(link: InviteLink, session, bot: Bot, page: int, total: int) -> str:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏
    
    Args:
        link: –û–±—ä–µ–∫—Ç InviteLink
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–∫–æ–≤
        result = await session.execute(
            select(InviteClick).where(InviteClick.link_url == link.link_url)
        )
        clicks = result.scalars().all()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_joins = len(clicks)
        current_members = len([c for c in clicks if c.left_date is None])
        left_members = len([c for c in clicks if c.left_date is not None])
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è
        retention_rate = (current_members / total_joins * 100) if total_joins > 0 else 0
        
        # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
        if retention_rate >= 80:
            status_emoji = "üü¢"
        elif retention_rate >= 60:
            status_emoji = "üü°"
        else:
            status_emoji = "üî¥"
        
        # –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (–ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤—à–∏—Ö –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        engaged_count = len([c for c in clicks if c.first_message_date is not None])
        engagement_rate = (engaged_count / total_joins * 100) if total_joins > 0 else 0
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if link.last_click:
            time_diff = datetime.utcnow() - link.last_click
            if time_diff.days > 0:
                last_activity = f"{time_diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
            elif time_diff.seconds > 3600:
                last_activity = f"{time_diff.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
            else:
                last_activity = f"{time_diff.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            last_activity = "–ù–∏–∫–æ–≥–¥–∞"
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        seven_days_ago = datetime.utcnow() - timedelta(days=7)
        result = await session.execute(
            select(
                func.date(InviteClick.join_date).label('date'),
                func.count(InviteClick.id).label('count')
            ).where(
                and_(
                    InviteClick.link_url == link.link_url,
                    InviteClick.join_date >= seven_days_ago
                )
            ).group_by(func.date(InviteClick.join_date)).order_by('date')
        )
        activity_data = []
        for row in result:
            if isinstance(row.date, str):
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ datetime –æ–±—ä–µ–∫—Ç
                    dt_obj = datetime.strptime(row.date, "%Y-%m-%d") # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD'
                    activity_data.append((dt_obj.strftime("%d.%m"), row.count))
                except ValueError:
                    logger.warning(f"Could not parse date string: {row.date}")
            elif isinstance(row.date, datetime):
                activity_data.append((row.date.strftime("%d.%m"), row.count))
            else:
                logger.warning(f"Unexpected type for row.date: {type(row.date)}")
        
        activity_graph = generate_activity_graph(activity_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        first_click_formatted = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if link.first_click:
            if isinstance(link.first_click, str):
                try:
                    dt_obj = datetime.strptime(link.first_click, "%Y-%m-%d %H:%M:%S.%f") # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    first_click_formatted = dt_obj.strftime('%d.%m.%Y')
                except ValueError:
                    logger.warning(f"Could not parse first_click string: {link.first_click}")
            elif isinstance(link.first_click, datetime):
                first_click_formatted = link.first_click.strftime('%d.%m.%Y')
            else:
                logger.warning(f"Unexpected type for link.first_click: {type(link.first_click)}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à –∏–∑ —Å—Å—ã–ª–∫–∏
        if link.link_url.startswith('https://t.me/+'):
            hash_part = link.link_url[len('https://t.me/+'):len('https://t.me/+')+8]
            logger.info(f"üè∑Ô∏è Building card for Telegram link: {link.link_url}")
            logger.info(f"üìä Displaying hash: {hash_part}")
        elif link.link_url.startswith('virtual_link:'):
            hash_part = f"@{link.link_url[13:]}"
            logger.info(f"üè∑Ô∏è Building card for virtual link: {link.link_url}")
            logger.info(f"üìä Displaying hash: {hash_part}")
        else:
            hash_part = link.link_url[-8:] if len(link.link_url) >= 8 else link.link_url
            logger.info(f"üè∑Ô∏è Building card for other link: {link.link_url}")
            logger.info(f"üìä Displaying hash: {hash_part}")
        
        card = f"""üîó <b>{hash_part}</b> ‚Äî {status_emoji} {retention_rate:.0f}% —É–¥–µ—Ä–∂–∞–Ω–∏—è

üì• <b>–í—Å–µ–≥–æ:</b> {total_joins}
‚úÖ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {current_members} ({(current_members/total_joins*100):.0f}%)
üìâ <b>–£—à–ª–æ:</b> {left_members} ({(left_members/total_joins*100):.0f}%)
‚è±Ô∏è <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π:</b> {last_activity}
üì≤ <b>–í–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å:</b> {engagement_rate:.0f}% (–Ω–∞–ø–∏—Å–∞–ª–∏ –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è)

üìÖ <b>–ê–∫—Ç–∏–≤–Ω–∞ —Å:</b> {first_click_formatted}

üìà <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∑–∞ 7 –¥–Ω–µ–π:</b>
{activity_graph}"""
        
        return card
        
    except Exception as e:
        logger.error(f"Error building invite card: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}"


async def show_invite_page(obj: Union[Message, CallbackQuery], bot: Bot, session_maker: async_sessionmaker, page: int = 1):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏"""
    async with session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
            total_result = await session.execute(
                select(func.count(InviteLink.id)).filter_by(is_archived=False)
            )
            total_links = total_result.scalar_one()
            logger.info(f"üìä Found {total_links} total invite links, showing page {page}")
            
            if total_links == 0:
                logger.info(f"‚ùå No active invite links found")
                text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫</b>\n\n‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="invite_refresh_1")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin:stats_detailed")]
                ])
                
                if isinstance(obj, CallbackQuery):
                    await edit_message(obj, text, keyboard, bot=bot)
                else:
                    await obj.answer(text, reply_markup=keyboard, parse_mode="HTML")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            link_result = await session.execute(
                select(InviteLink)
                .filter_by(is_archived=False)
                .order_by(InviteLink.last_click.desc())
                .offset(page - 1)
                .limit(1)
            )
            link = link_result.scalar_one_or_none()
            
            if not link:
                # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é
                return await show_invite_page(obj, bot, session_maker, 1)
            
            # –°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
            card_text = await build_invite_card(link, session, bot, page, total_links)
            logger.info(f"‚úÖ Successfully built card for link: {link.link_url[:50]}...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard_buttons = []
            nav_row = []
            
            if page > 1:
                nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"invite_prev_{page}"))
            
            nav_row.append(InlineKeyboardButton(text=f"üîó –°—Å—ã–ª–∫–∞ {page} –∏–∑ {total_links}", callback_data="noop"))
            
            if page < total_links:
                nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"invite_next_{page}"))
            
            keyboard_buttons.append(nav_row)
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"invite_refresh_{page}")])
            keyboard_buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin:stats_detailed")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            if isinstance(obj, CallbackQuery):
                await edit_message(obj, card_text, keyboard, bot=bot)
                logger.info(f"üì§ Card sent via callback to user {obj.from_user.id}")
            else:
                await obj.answer(card_text, reply_markup=keyboard, parse_mode="HTML")
                logger.info(f"üì§ Card sent via message to user {obj.from_user.id}")
                
        except Exception as e:
            logger.error(f"Error in show_invite_page: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫."
            if isinstance(obj, CallbackQuery):
                await edit_message(obj, error_text, bot=bot)
            else:
                await obj.answer(error_text, parse_mode="HTML")


async def handle_invite_callback(callback: CallbackQuery, bot: Bot, session_maker: async_sessionmaker):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞–º
    """
    try:
        data = callback.data
        
        if data.startswith("invite_prev_"):
            page = int(data.split("_")[-1])
            new_page = max(1, page - 1)
            await show_invite_page(callback, bot, session_maker, new_page)
            
        elif data.startswith("invite_next_"):
            page = int(data.split("_")[-1])
            new_page = page + 1
            await show_invite_page(callback, bot, session_maker, new_page)
            
        elif data.startswith("invite_refresh_"):
            page = int(data.split("_")[-1])
            await show_invite_page(callback, bot, session_maker, page)
            
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in handle_invite_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


async def handle_invites_command(message: Message, bot: Bot, session_maker: async_sessionmaker):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /invites
    """
    try:
        logger.info(f"üìã User {message.from_user.id} requested /invites command")
        logger.info(f"üí¨ Chat ID: {message.chat.id}")
        await show_invite_page(message, bot, session_maker, 1)
    except Exception as e:
        logger.error(f"Error in handle_invites_command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")


def register(dp: Dispatcher, bot: Bot, async_session_local: async_sessionmaker):
    logger.debug("Attempting to register invite stats plugin handlers.")
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        async def handle_invite_chat_member_wrapper(update: ChatMemberUpdated):
            logger.debug(f"ChatMemberUpdated received: {update}")
            return await handle_invite_chat_member(update, async_session_local)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–Ω–µ –±–æ—Ç–∞)
        dp.chat_member.register(handle_invite_chat_member_wrapper)
        
        # –¢–∞–∫–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        dp.my_chat_member.register(handle_invite_chat_member_wrapper)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
        async def handle_invite_callback_wrapper(callback: CallbackQuery):
            return await handle_invite_callback(callback, bot, async_session_local)
        
        dp.callback_query.register(
            handle_invite_callback_wrapper,
            lambda c: c.data and c.data.startswith("invite_")
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /invites
        async def handle_invites_command_wrapper(message: Message):
            return await handle_invites_command(message, bot, async_session_local)
        
        dp.message.register(
            handle_invites_command_wrapper,
            Command("invites"),
            IsAdmin()
        )
        
        logger.info("‚úÖ Invite stats plugin registered successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error registering invite stats plugin: {e}")