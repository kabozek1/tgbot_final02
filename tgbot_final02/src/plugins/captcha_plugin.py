import asyncio
import logging
import uuid
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions
from aiogram.filters import ChatMemberUpdatedFilter, KICKED, LEFT, MEMBER
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from sqlalchemy.ext.asyncio import async_sessionmaker # Added import
from models.base import InviteLink, InviteClick
from sqlalchemy import select

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# TODO: Replace with Redis/DB in production
pending_users = {}  # {user_id: {'chat_id': chat_id, 'message_id': message_id, 'task': task, 'join_info': join_info}}

# Timeout for captcha (2 minutes)
CAPTCHA_TIMEOUT = 120

logger = logging.getLogger(__name__)

async def delete_welcome_message_after_delay(message: Message, delay: int):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        await asyncio.sleep(delay)
        await message.delete()
    except (TelegramBadRequest, TelegramForbiddenError):
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

def register(dp: Dispatcher, bot, async_session_local: async_sessionmaker):
    logger.debug("Attempting to register captcha plugin handlers.")
    """Register captcha plugin handlers."""
    
    @dp.message(lambda m: m.new_chat_members and m.chat.type in ("group", "supergroup"))
    async def on_new_members(message: Message):
        """Handle new members joining the chat."""
        for user in message.new_chat_members:
            # Skip bots
            if user.is_bot:
                continue
                
            chat = message.chat
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            logger.info(f"üë§ New member joined: {user.first_name} ({user.id}) in chat {chat.id}")
            logger.info(f"üìù User details: @{user.username or 'no_username'}, full_name: {user.full_name}")
            logger.info(f"üí¨ Chat type: {chat.type}, chat title: {chat.title or 'no_title'}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            invite_link_info = None
            invite_hash = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Å—ã–ª–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if hasattr(message, 'from_user') and message.from_user:
                logger.debug(f"Message from_user: {message.from_user.id}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Ö–µ—à –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            # –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö —Ö–µ—à –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
            if hasattr(message, 'reply_to_message') and message.reply_to_message:
                logger.debug(f"Reply to message present: {message.reply_to_message.message_id}")
            
            join_info = {
                'user_id': user.id,
                'chat_id': chat.id,
                'join_date': message.date,
                'via_link': getattr(message, 'via_bot', None) is not None,
                'message_id': message.message_id,
                'invite_hash': invite_hash,
                'invite_link_info': invite_link_info
            }

            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –∫–∞–ø—á–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # if invite_link_info:
            #     logger.info(f"User {user.id} joined via invite link. Skipping captcha restriction.")
            #     continue
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–ø—Ä–µ—â–∞–µ–º –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
            try:
                restricted_permissions = ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False
                )
                await message.bot.restrict_chat_member(
                    chat_id=chat.id,
                    user_id=user.id,
                    permissions=restricted_permissions
                )
                logger.info(f"Restricted permissions for user {user.first_name} ({user.id})")
            except (TelegramBadRequest, TelegramForbiddenError) as e:
                logger.error(f"Failed to restrict user {user.first_name}: {e}")
                continue
            
            # Generate unique token for this captcha
            token = str(uuid.uuid4())[:8]
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø —á–µ–ª–æ–≤–µ–∫", callback_data=f"captcha:{chat.id}:{user.id}:{token}")]
            ])
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                captcha_message = await message.bot.send_message(
                    chat_id=chat.id,
                    text=f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
                         f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
                         f"‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å {CAPTCHA_TIMEOUT} —Å–µ–∫—É–Ω–¥.",
                    reply_markup=keyboard
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                pending_users[user.id] = {
                    'chat_id': chat.id,
                    'message_id': captcha_message.message_id,
                    'task': None,
                    'token': token,
                    'join_info': join_info
                }
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–∏–∫–∞ —á–µ—Ä–µ–∑ CAPTCHA_TIMEOUT —Å–µ–∫—É–Ω–¥
                async def kick_user():
                    await asyncio.sleep(CAPTCHA_TIMEOUT)
                    if user.id in pending_users:
                        try:
                            await message.bot.ban_chat_member(chat_id=chat.id, user_id=user.id)
                            await message.bot.unban_chat_member(chat_id=chat.id, user_id=user.id)
                            await message.bot.send_message(
                                chat_id=chat.id,
                                text=f"‚ùå {user.first_name} –±—ã–ª —É–¥–∞–ª–µ–Ω –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
                            )
                        except (TelegramBadRequest, TelegramForbiddenError):
                            pass
                        finally:
                            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
                            if user.id in pending_users:
                                del pending_users[user.id]
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
                task = asyncio.create_task(kick_user())
                pending_users[user.id]['task'] = task
                
            except (TelegramBadRequest, TelegramForbiddenError) as e:
                logger.error(f"Failed to send captcha for user {user.first_name}: {e}")
                continue
    
    @dp.callback_query(lambda c: c.data and c.data.startswith("captcha:"))
    async def on_captcha_callback(callback: CallbackQuery):
        """Handle captcha confirmation button press."""
        try:
            logger.info(f"Captcha callback received: {callback.data} from user {callback.from_user.id}")
            
            # Parse callback data: captcha:{chat_id}:{user_id}:{token}
            parts = callback.data.split(':')
            if len(parts) != 4:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ø—á–∏", show_alert=True)
                return
                
            chat_id = int(parts[1])
            user_id = int(parts[2])
            token = parts[3]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if callback.from_user.id != user_id:
                await callback.answer("–≠—Ç—É –∫–Ω–æ–ø–∫—É –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö
            if user_id not in pending_users:
                await callback.answer("‚ùå –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            if pending_users[user_id].get('token') != token:
                await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!", show_alert=True)
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–∏–∫–∞
            if pending_users[user_id]['task']:
                pending_users[user_id]['task'].cancel()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            normal_permissions = ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False
            )
            await callback.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=normal_permissions
            )
            logger.info(f"Restored permissions for user {callback.from_user.first_name} ({user_id})")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            try:
                await callback.bot.delete_message(
                    chat_id=chat_id,
                    message_id=pending_users[user_id]['message_id']
                )
            except (TelegramBadRequest, TelegramForbiddenError):
                pass  # Ignore if can't delete
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            welcome_message = await callback.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ {callback.from_user.first_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –æ–Ω —á–µ–ª–æ–≤–µ–∫!\n"
                     f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            asyncio.create_task(delete_welcome_message_after_delay(welcome_message, 3))
            
            logger.info(f"‚úÖ User {callback.from_user.first_name} ({callback.from_user.id}) successfully passed captcha in chat {chat_id}")
            logger.info(f"üéâ User is now fully verified and can participate in chat")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            try:
                from models.base import User
                async with async_session_local() as session:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    result = await session.execute(
                        select(User).where(User.telegram_id == callback.from_user.id)
                    )
                    existing_user = result.scalar_one_or_none()
                    
                    if not existing_user:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        new_user = User(
                            telegram_id=callback.from_user.id,
                            username=callback.from_user.username,
                            first_name=callback.from_user.first_name
                        )
                        session.add(new_user)
                        await session.commit()
                        logger.info(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.first_name} (@{callback.from_user.username or 'no_username'}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        existing_user.username = callback.from_user.username
                        existing_user.first_name = callback.from_user.first_name
                        await session.commit()
                        logger.info(f"üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.first_name} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î")
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –≤ invite_stats
            join_info = pending_users[callback.from_user.id].get('join_info')
            if join_info:
                try:
                    async with async_session_local() as session:
                        # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–∞–ø—á—É
                        virtual_link_url = f"virtual://captcha_join_{chat_id}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å—Å—ã–ª–∫–∞
                        result = await session.execute(
                            select(InviteLink).where(InviteLink.link_url == virtual_link_url)
                        )
                        invite_link = result.scalar_one_or_none()
                        
                        if not invite_link:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                            invite_link = InviteLink(
                                link_url=virtual_link_url,
                                name="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–ø—á—É",
                                creator_id=None,  # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Å—ã–ª–∫–∞
                                source="captcha_verification",
                                created_at=join_info['join_date']
                            )
                            session.add(invite_link)
                            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–ª–∏–∫–µ
                        invite_click = InviteClick(
                            user_id=callback.from_user.id,
                            link_url=virtual_link_url,
                            clicked_at=join_info['join_date']
                        )
                        session.add(invite_click)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
                        invite_link.click_count = (invite_link.click_count or 0) + 1
                        
                        await session.commit()
                        logger.info(f"üìä Recorded captcha join for user {callback.from_user.id} via virtual link")
                        
                except Exception as e:
                    logger.error(f"Failed to record captcha join stats: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            del pending_users[callback.from_user.id]
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ")
            
        except Exception as e:
            logger.error(f"Captcha callback error: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)