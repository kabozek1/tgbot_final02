"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–º–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""

import logging
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import async_sessionmaker

from .message_utils import edit_message, process_user_input
from utils.plugin_settings import load_plugin_settings, save_plugin_settings, get_plugin_setting, update_plugin_setting
from plugins.blacklist_plugin import sync_antimat_settings

logger = logging.getLogger(__name__)


class AntimatSettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏–º–∞—Ç–∞"""
    VIEW = State()
    TOGGLE = State()
    TOGGLE_WARNINGS = State()
    ADD_WORD = State()
    REMOVE_WORD = State()
    ADD_LINK = State()
    REMOVE_LINK = State()


async def safe_answer_callback(query: CallbackQuery):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query"""
    try:
        await query.answer()
    except Exception as e:
        logger.debug(f"Failed to answer callback query: {e}")


def get_antimat_settings_keyboard(settings: dict) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏–º–∞—Ç–∞"""
    status_emoji = "üü¢" if settings.get("enabled", True) else "üî¥"
    status_text = "–í—ã–∫–ª—é—á–∏—Ç—å" if settings.get("enabled", True) else "–í–∫–ª—é—á–∏—Ç—å"
    
    warnings_emoji = "üü¢" if settings.get("warnings_enabled", True) else "üî¥"
    warnings_text = "–í—ã–∫–ª—é—á–∏—Ç—å" if settings.get("warnings_enabled", True) else "–í–∫–ª—é—á–∏—Ç—å"
    
    words_count = len(settings.get("blacklist_words", []))
    links_count = len(settings.get("blacklist_links", []))
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{status_emoji} {status_text} —Ñ–∏–ª—å—Ç—Ä", 
            callback_data="antimat:toggle"
        )],
        [InlineKeyboardButton(
            text=f"{warnings_emoji} {warnings_text} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", 
            callback_data="antimat:toggle_warnings"
        )],
        [InlineKeyboardButton(
            text=f"üìù –°–ª–æ–≤–∞ ({words_count})", 
            callback_data="antimat:manage_words"
        )],
        [InlineKeyboardButton(
            text=f"üîó –°—Å—ã–ª–∫–∏ ({links_count})", 
            callback_data="antimat:manage_links"
        )],
        [InlineKeyboardButton(
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", 
            callback_data="antimat:clear_all"
        )],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main_menu")]
    ])


def get_back_to_antimat_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–Ω—Ç–∏–º–∞—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="antimat:view")]
    ])


def get_word_removal_keyboard(words: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤"""
    buttons = []
    for word in words[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–ª–æ–≤
        buttons.append([InlineKeyboardButton(
            text=f"üóëÔ∏è {word}", 
            callback_data=f"antimat:remove_word:{word}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="antimat:view")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_link_removal_keyboard(links: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫"""
    buttons = []
    for link in links[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å—Å—ã–ª–æ–∫
        buttons.append([InlineKeyboardButton(
            text=f"üóëÔ∏è {link}", 
            callback_data=f"antimat:remove_link:{link}"
        )])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="antimat:view")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def handle_antimat(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–Ω—Ç–∏–º–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    await safe_answer_callback(query)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await state.set_state(AntimatSettingsStates.VIEW)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–º–∞—Ç–∞
    await show_antimat_settings(query, state, bot, async_session_local)


async def show_antimat_settings(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–º–∞—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    settings = await load_plugin_settings("antimat", async_session_local)
    
    status_emoji = "üü¢" if settings.get("enabled", True) else "üî¥"
    status_text = "–í–∫–ª—é—á–µ–Ω" if settings.get("enabled", True) else "–í—ã–∫–ª—é—á–µ–Ω"
    
    warnings_emoji = "üü¢" if settings.get("warnings_enabled", True) else "üî¥"
    warnings_text = "–í–∫–ª—é—á–µ–Ω—ã" if settings.get("warnings_enabled", True) else "–í—ã–∫–ª—é—á–µ–Ω—ã"
    
    words_count = len(settings.get("blacklist_words", []))
    links_count = len(settings.get("blacklist_links", []))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫
    words_preview = ", ".join(settings.get("blacklist_words", [])[:3])
    if words_count > 3:
        words_preview += f" –∏ –µ—â–µ {words_count - 3}"
    
    links_preview = ", ".join(settings.get("blacklist_links", [])[:3])
    if links_count > 3:
        links_preview += f" –∏ –µ—â–µ {links_count - 3}"
    
    text = f"""ü§¨ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–º–∞—Ç–∞</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
{warnings_emoji} <b>–ê–≤—Ç–æ–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> {warnings_text}

üìù <b>–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:</b> {words_count}
{words_preview if words_preview else "–ù–µ—Ç"}

üîó <b>–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b> {links_count}
{links_preview if links_preview else "–ù–µ—Ç"}

<i>–ê–Ω—Ç–∏–º–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏.</i>"""
    
    keyboard = get_antimat_settings_keyboard(settings)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    await state.update_data(last_message_id=current_message_id)


async def handle_antimat_toggle(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω—Ç–∏–º–∞—Ç–∞"""
    await safe_answer_callback(query)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    new_enabled = not settings.get("enabled", True)
    updated_settings = update_plugin_setting(settings, "enabled", new_enabled)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_plugin_settings("antimat", updated_settings, async_session_local)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    await sync_antimat_settings(async_session_local)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
    await show_antimat_settings(query, state, bot, async_session_local)
    
    logger.info(f"Antimat {'enabled' if new_enabled else 'disabled'} by admin {query.from_user.id}")


async def handle_antimat_toggle_warnings(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    await safe_answer_callback(query)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    new_warnings = not settings.get("warnings_enabled", True)
    updated_settings = update_plugin_setting(settings, "warnings_enabled", new_warnings)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_plugin_settings("antimat", updated_settings, async_session_local)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    await sync_antimat_settings(async_session_local)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
    await show_antimat_settings(query, state, bot, async_session_local)
    
    logger.info(f"Antimat warnings {'enabled' if new_warnings else 'disabled'} by admin {query.from_user.id}")


async def handle_antimat_add_word(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞"""
    await safe_answer_callback(query)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
    await state.set_state(AntimatSettingsStates.ADD_WORD)
    
    text = """üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞</b>

–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:"""
    
    keyboard = get_back_to_antimat_keyboard()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    await state.update_data(last_message_id=current_message_id)


async def handle_add_word_input(message: Message, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ FSM
        data = await state.get_data()
        last_message_id = data.get('last_message_id')
        
        word = message.text.strip().lower()
        
        if not word:
            error_text = "‚ùå <b>–û—à–∏–±–∫–∞: –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É:"
            error_keyboard = get_back_to_antimat_keyboard()
            
            if last_message_id:
                try:
                    fake_query = type('FakeQuery', (), {
                        'message': type('Message', (), {
                            'message_id': last_message_id,
                            'chat': type('Chat', (), {'id': message.chat.id})()
                        })()
                    })()
                    await edit_message(fake_query, error_text, error_keyboard, "HTML", bot)
                    return
                except Exception:
                    pass
            
            await process_user_input(bot=bot, message=message, text=error_text, reply_markup=error_keyboard, parse_mode="HTML", state=state)
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await load_plugin_settings("antimat", async_session_local)
        words = settings.get("blacklist_words", [])
        
        if word in words:
            error_text = f"‚ùå <b>–°–ª–æ–≤–æ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ</b>\n\n–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ:"
            error_keyboard = get_back_to_antimat_keyboard()
            
            if last_message_id:
                try:
                    fake_query = type('FakeQuery', (), {
                        'message': type('Message', (), {
                            'message_id': last_message_id,
                            'chat': type('Chat', (), {'id': message.chat.id})()
                        })()
                    })()
                    await edit_message(fake_query, error_text, error_keyboard, "HTML", bot)
                    return
                except Exception:
                    pass
            
            await process_user_input(bot=bot, message=message, text=error_text, reply_markup=error_keyboard, parse_mode="HTML", state=state)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
        words.append(word)
        updated_settings = update_plugin_setting(settings, "blacklist_words", words)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await save_plugin_settings("antimat", updated_settings, async_session_local)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        await sync_antimat_settings(async_session_local)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await state.set_state(AntimatSettingsStates.VIEW)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        settings = await load_plugin_settings("antimat", async_session_local)
        words = settings.get("blacklist_words", [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å–ª–æ–≤
        if not words:
            text = """üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏</b>

–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ."""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="antimat:add_word")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="antimat:view")]
            ])
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–ª–æ–≤
            display_words = words[:10]
            words_text = "\n".join([f"‚Ä¢ {word}" for word in display_words])
            
            if len(words) > 10:
                words_text += f"\n... –∏ –µ—â–µ {len(words) - 10}"
            
            text = f"""üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏</b>

–í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{len(words)}</b>

{words_text}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ."""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
            buttons = []
            for word in display_words:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ callback_data
                safe_word = word.replace(":", "%3A")
                buttons.append([InlineKeyboardButton(
                    text=f"{word} ‚ùå", 
                    callback_data=f"antimat:remove_word_inline:{safe_word}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons.append([InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", 
                callback_data="antimat:add_word"
            )])
            buttons.append([InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞", 
                callback_data="antimat:clear_words"
            )])
            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", 
                callback_data="antimat:view"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º process_user_input –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await process_user_input(bot, message, text, keyboard, "HTML", state)
        
        logger.info(f"Added word '{word}' to antimat blacklist by admin {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error in handle_add_word_input: {e}")
        try:
            await process_user_input(bot=bot, message=message, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="HTML", state=state)
        except Exception:
            pass


async def handle_antimat_remove_word(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    await safe_answer_callback(query)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    words = settings.get("blacklist_words", [])
    
    if not words:
        text = """üìù <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤</b>

–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç."""
        keyboard = get_back_to_antimat_keyboard()
    else:
        text = f"""üìù <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"""
        keyboard = get_word_removal_keyboard(words)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    await state.update_data(last_message_id=current_message_id)


async def handle_remove_word_callback(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    await safe_answer_callback(query)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ callback_data
    word = query.data.split(":", 2)[2]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    words = settings.get("blacklist_words", [])
    
    if word in words:
        words.remove(word)
        updated_settings = update_plugin_setting(settings, "blacklist_words", words)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await save_plugin_settings("antimat", updated_settings, async_session_local)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        await sync_antimat_settings(async_session_local)
        
        logger.info(f"Removed word '{word}' from antimat blacklist by admin {query.from_user.id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
    await show_antimat_settings(query, state, bot, async_session_local)


async def handle_antimat_add_link(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
    await safe_answer_callback(query)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
    await state.set_state(AntimatSettingsStates.ADD_LINK)
    
    text = """üîó <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏</b>

–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ–º–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:"""
    
    keyboard = get_back_to_antimat_keyboard()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    await state.update_data(last_message_id=current_message_id)


async def handle_add_link_input(message: Message, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ FSM
        data = await state.get_data()
        last_message_id = data.get('last_message_id')
        
        link = message.text.strip().lower()
        
        if not link:
            error_text = "‚ùå <b>–û—à–∏–±–∫–∞: –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –¥–æ–º–µ–Ω:"
            error_keyboard = get_back_to_antimat_keyboard()
            
            if last_message_id:
                try:
                    fake_query = type('FakeQuery', (), {
                        'message': type('Message', (), {
                            'message_id': last_message_id,
                            'chat': type('Chat', (), {'id': message.chat.id})()
                        })()
                    })()
                    await edit_message(fake_query, error_text, error_keyboard, "HTML", bot)
                    return
                except Exception:
                    pass
            
            await process_user_input(bot=bot, message=message, text=error_text, reply_markup=error_keyboard, parse_mode="HTML", state=state)
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await load_plugin_settings("antimat", async_session_local)
        links = settings.get("blacklist_links", [])
        
        if link in links:
            error_text = f"‚ùå <b>–°—Å—ã–ª–∫–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ</b>\n\n–°—Å—ã–ª–∫–∞ '{link}' —É–∂–µ –µ—Å—Ç—å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É:"
            error_keyboard = get_back_to_antimat_keyboard()
            
            if last_message_id:
                try:
                    fake_query = type('FakeQuery', (), {
                        'message': type('Message', (), {
                            'message_id': last_message_id,
                            'chat': type('Chat', (), {'id': message.chat.id})()
                        })()
                    })()
                    await edit_message(fake_query, error_text, error_keyboard, "HTML", bot)
                    return
                except Exception:
                    pass
            
            await process_user_input(bot=bot, message=message, text=error_text, reply_markup=error_keyboard, parse_mode="HTML", state=state)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        links.append(link)
        updated_settings = update_plugin_setting(settings, "blacklist_links", links)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await save_plugin_settings("antimat", updated_settings, async_session_local)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        await sync_antimat_settings(async_session_local)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await state.set_state(AntimatSettingsStates.VIEW)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        settings = await load_plugin_settings("antimat", async_session_local)
        links = settings.get("blacklist_links", [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å—Å—ã–ª–æ–∫
        if not links:
            text = """üîó <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏</b>

–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç.

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é."""
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="antimat:add_link")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="antimat:view")]
            ])
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å—Å—ã–ª–æ–∫
            display_links = links[:10]
            links_text = "\n".join([f"‚Ä¢ {link}" for link in display_links])
            
            if len(links) > 10:
                links_text += f"\n... –∏ –µ—â–µ {len(links) - 10}"
            
            text = f"""üîó <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏</b>

–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: <b>{len(links)}</b>

{links_text}

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é."""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
            buttons = []
            for link in display_links:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ callback_data
                safe_link = link.replace(":", "%3A")
                buttons.append([InlineKeyboardButton(
                    text=f"{link} ‚ùå", 
                    callback_data=f"antimat:remove_link_inline:{safe_link}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons.append([InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", 
                callback_data="antimat:add_link"
            )])
            buttons.append([InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏", 
                callback_data="antimat:clear_links"
            )])
            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", 
                callback_data="antimat:view"
            )])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º process_user_input –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await process_user_input(bot, message, text, keyboard, "HTML", state)
        
        logger.info(f"Added link '{link}' to antimat blacklist by admin {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error in handle_add_link_input: {e}")
        try:
            await process_user_input(bot=bot, message=message, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="HTML", state=state)
        except Exception:
            pass


async def handle_antimat_remove_link(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    await safe_answer_callback(query)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    links = settings.get("blacklist_links", [])
    
    if not links:
        text = """üîó <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫</b>

–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç."""
        keyboard = get_back_to_antimat_keyboard()
    else:
        text = f"""üîó <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"""
        keyboard = get_link_removal_keyboard(links)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    await state.update_data(last_message_id=current_message_id)


async def handle_remove_link_callback(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    await safe_answer_callback(query)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ callback_data
    link = query.data.split(":", 2)[2]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    links = settings.get("blacklist_links", [])
    
    if link in links:
        links.remove(link)
        updated_settings = update_plugin_setting(settings, "blacklist_links", links)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await save_plugin_settings("antimat", updated_settings, async_session_local)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        await sync_antimat_settings(async_session_local)
        
        logger.info(f"Removed link '{link}' from antimat blacklist by admin {query.from_user.id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω
    await show_antimat_settings(query, state, bot, async_session_local)


async def handle_antimat_clear_all(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –∞–Ω—Ç–∏–º–∞—Ç–∞"""
    await safe_answer_callback(query)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
    updated_settings = update_plugin_setting(settings, "blacklist_words", [])
    updated_settings = update_plugin_setting(updated_settings, "blacklist_links", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_plugin_settings("antimat", updated_settings, async_session_local)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    await sync_antimat_settings(async_session_local)
    try:
        from plugins.blacklist_plugin import blacklist_words, blacklist_links
        blacklist_words.clear()
        blacklist_links.clear()
        logger.info("‚úÖ Cleared global blacklist variables in blacklist_plugin.py")
    except ImportError:
        logger.warning("‚ö†Ô∏è Could not import blacklist_plugin to clear global variables")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await show_antimat_settings(query, state, bot, async_session_local)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await query.answer("‚úÖ –°–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã")
    
    logger.info(f"Antimat lists cleared by admin {query.from_user.id}")


async def show_antimat_words(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    settings = await load_plugin_settings("antimat", async_session_local)
    words = settings.get("blacklist_words", [])
    
    if not words:
        text = """üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏</b>

–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ."""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="antimat:add_word")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="antimat:view")]
        ])
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 5 —Å–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        words_per_page = 5
        total_pages = (len(words) + words_per_page - 1) // words_per_page
        current_page = max(0, min(page, total_pages - 1))
        
        start_idx = current_page * words_per_page
        end_idx = start_idx + words_per_page
        display_words = words[start_idx:end_idx]
        
        words_text = "\n".join([f"‚Ä¢ {word}" for word in display_words])
        
        text = f"""üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏</b>

–í—Å–µ–≥–æ —Å–ª–æ–≤: <b>{len(words)}</b>

{words_text}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ."""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
        buttons = []
        for word in display_words:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ callback_data
            safe_word = word.replace(":", "%3A")
            buttons.append([InlineKeyboardButton(
                text=f"{word} ‚ùå", 
                callback_data=f"antimat:remove_word_inline:{safe_word}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            pagination_buttons = []
            if current_page > 0:
                pagination_buttons.append(InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data=f"antimat:words_page:{current_page-1}"
                ))
            pagination_buttons.append(InlineKeyboardButton(
                text=f"üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1} –∏–∑ {total_pages}", 
                callback_data="noop"
            ))
            if current_page < total_pages - 1:
                pagination_buttons.append(InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", 
                    callback_data=f"antimat:words_page:{current_page+1}"
                ))
            buttons.append(pagination_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons.append([InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", 
            callback_data="antimat:add_word"
        )])
        buttons.append([InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞", 
            callback_data="antimat:clear_words"
        )])
        buttons.append([InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", 
            callback_data="antimat:view"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    await state.update_data(last_message_id=current_message_id)


async def show_antimat_links(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    settings = await load_plugin_settings("antimat", async_session_local)
    links = settings.get("blacklist_links", [])
    
    if not links:
        text = """üîó <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏</b>

–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç.

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é."""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="antimat:add_link")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="antimat:view")]
        ])
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 5 —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        links_per_page = 5
        total_pages = (len(links) + links_per_page - 1) // links_per_page
        current_page = max(0, min(page, total_pages - 1))
        
        start_idx = current_page * links_per_page
        end_idx = start_idx + links_per_page
        display_links = links[start_idx:end_idx]
        
        links_text = "\n".join([f"‚Ä¢ {link}" for link in display_links])
        
        text = f"""üîó <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏</b>

–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: <b>{len(links)}</b>

{links_text}

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é."""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
        buttons = []
        for link in display_links:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ callback_data
            safe_link = link.replace(":", "%3A")
            buttons.append([InlineKeyboardButton(
                text=f"{link} ‚ùå", 
                callback_data=f"antimat:remove_link_inline:{safe_link}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            pagination_buttons = []
            if current_page > 0:
                pagination_buttons.append(InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data=f"antimat:links_page:{current_page-1}"
                ))
            pagination_buttons.append(InlineKeyboardButton(
                text=f"üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1} –∏–∑ {total_pages}", 
                callback_data="noop"
            ))
            if current_page < total_pages - 1:
                pagination_buttons.append(InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", 
                    callback_data=f"antimat:links_page:{current_page+1}"
                ))
            buttons.append(pagination_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons.append([InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", 
            callback_data="antimat:add_link"
        )])
        buttons.append([InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏", 
            callback_data="antimat:clear_links"
        )])
        buttons.append([InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", 
            callback_data="antimat:view"
        )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    await state.update_data(last_message_id=current_message_id)


async def handle_manage_words(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–ª–æ–≤–∞–º–∏"""
    await safe_answer_callback(query)
    await state.set_state(AntimatSettingsStates.VIEW)
    await show_antimat_words(query, state, bot, async_session_local, page=0)


async def handle_manage_links(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Å—ã–ª–∫–∞–º–∏"""
    await safe_answer_callback(query)
    await state.set_state(AntimatSettingsStates.VIEW)
    await show_antimat_links(query, state, bot, async_session_local, page=0)


async def handle_remove_word_inline(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ callback_data (–¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
    word = query.data.split(":", 2)[2].replace("%3A", ":")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    words = settings.get("blacklist_words", [])
    
    if word in words:
        words.remove(word)
        updated_settings = update_plugin_setting(settings, "blacklist_words", words)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await save_plugin_settings("antimat", updated_settings, async_session_local)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        await sync_antimat_settings(async_session_local)
        
        logger.info(f"Removed word '{word}' from antimat blacklist by admin {query.from_user.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        await show_antimat_words(query, state, bot, async_session_local, page=0)
        await query.answer("‚úÖ –°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ")
    else:
        await query.answer("‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


async def handle_remove_link_inline(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ callback_data (–¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
    link = query.data.split(":", 2)[2].replace("%3A", ":")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    links = settings.get("blacklist_links", [])
    
    if link in links:
        links.remove(link)
        updated_settings = update_plugin_setting(settings, "blacklist_links", links)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await save_plugin_settings("antimat", updated_settings, async_session_local)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        await sync_antimat_settings(async_session_local)
        
        logger.info(f"Removed link '{link}' from antimat blacklist by admin {query.from_user.id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        await show_antimat_links(query, state, bot, async_session_local, page=0)
        await query.answer("‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await query.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


async def handle_clear_words(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ª–æ–≤"""
    await safe_answer_callback(query)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    updated_settings = update_plugin_setting(settings, "blacklist_words", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_plugin_settings("antimat", updated_settings, async_session_local)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    await sync_antimat_settings(async_session_local)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await show_antimat_words(query, state, bot, async_session_local, page=0)
    await query.answer("‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã")
    
    logger.info(f"All antimat words cleared by admin {query.from_user.id}")


async def handle_clear_links(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫"""
    await safe_answer_callback(query)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await load_plugin_settings("antimat", async_session_local)
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
    updated_settings = update_plugin_setting(settings, "blacklist_links", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_plugin_settings("antimat", updated_settings, async_session_local)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    await sync_antimat_settings(async_session_local)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await show_antimat_links(query, state, bot, async_session_local, page=0)
    await query.answer("‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    
    logger.info(f"All antimat links cleared by admin {query.from_user.id}")


async def handle_words_pagination(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ª–æ–≤"""
    await safe_answer_callback(query)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(query.data.split(":")[2])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_antimat_words(query, state, bot, async_session_local, page=page)


async def handle_links_pagination(query: CallbackQuery, state: FSMContext, bot: Bot, async_session_local: async_sessionmaker):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫"""
    await safe_answer_callback(query)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(query.data.split(":")[2])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_antimat_links(query, state, bot, async_session_local, page=page)
