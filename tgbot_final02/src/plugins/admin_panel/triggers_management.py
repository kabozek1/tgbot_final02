"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""

import logging
from datetime import datetime
from aiogram import Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy.future import select
from sqlalchemy import func, desc

from models.base import Trigger
from .message_utils import edit_message, process_user_input

logger = logging.getLogger(__name__)


class TriggerStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏"""
    waiting_trigger_text = State()
    waiting_response_text = State()


def get_triggers_menu_keyboard(triggers: list, page: int = 0, per_page: int = 3) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    buttons = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total_pages = (len(triggers) + per_page - 1) // per_page if triggers else 1
    current_page = page + 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_triggers = triggers[start_idx:end_idx]
    
    for trigger in page_triggers:
        # –°—Ç–∞—Ç—É—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–≤–∫–ª—é—á–µ–Ω/–≤—ã–∫–ª—é—á–µ–Ω)
        status_emoji = "üü¢" if trigger.is_active else "üî¥"
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        trigger_display = trigger.trigger_text[:20] + "..." if len(trigger.trigger_text) > 20 else trigger.trigger_text
        response_display = trigger.response_text[:20] + "..." if len(trigger.response_text) > 20 else trigger.response_text
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∏–≥–≥–µ—Ä–µ
        trigger_info = f'{status_emoji} "{trigger_display}" ‚Üí "{response_display}"'
        buttons.append([InlineKeyboardButton(text=trigger_info, callback_data=f"trigger_view:{trigger.id}")])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if trigger.trigger_count > 0:
            last_time = "–Ω–∏–∫–æ–≥–¥–∞"
            if trigger.last_triggered:
                time_diff = datetime.utcnow() - trigger.last_triggered
                if time_diff.days > 0:
                    last_time = f"{time_diff.days} –¥. –Ω–∞–∑–∞–¥"
                elif time_diff.seconds > 3600:
                    last_time = f"{time_diff.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
                else:
                    last_time = f"{time_diff.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            
            stats_text = f"üì• {trigger.trigger_count} —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π | ‚è± –ø–æ—Å–ª–µ–¥–Ω–∏–π: {last_time}"
        else:
            stats_text = "üì• 0 —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π"
        
        buttons.append([InlineKeyboardButton(text=stats_text, callback_data="noop")])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
        toggle_text = "‚õîÔ∏è –í—ã–∫–ª" if trigger.is_active else "‚úÖ –í–∫–ª"
        action_buttons = [
            InlineKeyboardButton(text=toggle_text, callback_data=f"trigger_toggle:{trigger.id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"trigger_delete:{trigger.id}")
        ]
        buttons.append(action_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–æ–π –∂–µ —à–∏—Ä–∏–Ω—ã —á—Ç–æ –∏ –º–µ–Ω—é
        if trigger != page_triggers[-1]:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
            buttons.append([InlineKeyboardButton(text="‚†Ä", callback_data="noop")])

    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π/–∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if page_triggers:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        buttons.append([InlineKeyboardButton(text="‚†Ä", callback_data="noop")])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if total_pages > 1:
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"triggers_page:{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(text=f"üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}", callback_data="noop"))
        
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"triggers_page:{page+1}"))
        
        buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä", callback_data="trigger_add"),
        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin:main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_trigger_view_keyboard(trigger_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"trigger_edit:{trigger_id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"trigger_delete:{trigger_id}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º", callback_data="admin:triggers")]
    ])


async def show_triggers_menu(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot, page: int = 0, answer_callback: bool = True):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏"""
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if answer_callback:
        try:
            await query.answer()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ callback —É–∂–µ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω
    
    await state.clear()
    
    async with async_session_local() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        result = await session.execute(
            select(Trigger).order_by(desc(Trigger.created_at))
        )
        triggers = result.scalars().all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    total_triggers = len(triggers)
    per_page = 3
    total_pages = (total_triggers + per_page - 1) // per_page if total_triggers > 0 else 1
    current_page = page + 1
    
    if total_triggers == 0:
        text = "üõé –¢—Ä–∏–≥–≥–µ—Ä—ã\n\n‚ùå –¢—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä", callback_data="trigger_add")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin:main_menu")]
        ])
    else:
        text = f"üõé –¢—Ä–∏–≥–≥–µ—Ä—ã ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}\n\n"
        keyboard = get_triggers_menu_keyboard(triggers, page)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    message_id = await edit_message(query, text, keyboard, bot=bot)
    if message_id:
        await state.update_data(last_message_id=message_id)


async def handle_trigger_add(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    await state.set_state(TriggerStates.waiting_trigger_text)
    
    text = (
        "üìå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞...\n\n"
        "üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª |:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>—Ü–µ–Ω–∞?|—Å—Ç–æ–∏–º–æ—Å—Ç—å?|—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç</code>\n\n"
        "‚ùóÔ∏è –†–µ–≥–∏—Å—Ç—Ä –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:triggers")]
    ])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    message_id = await edit_message(query, text, keyboard, bot=bot)
    if message_id:
        await state.update_data(last_message_id=message_id)


async def handle_trigger_text_input(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    trigger_text = message.text.strip()
    
    if not trigger_text:
        text = "‚ùå –¢–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:triggers")]
        ])
        await process_user_input(bot, message, text, keyboard, state=state)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(trigger_text=trigger_text)
    await state.set_state(TriggerStates.waiting_response_text)
    
    text = (
        f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä: <code>{trigger_text}</code>\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞..."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:triggers")]
    ])
    
    await process_user_input(bot, message, text, keyboard, state=state)


async def handle_response_text_input(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
    response_text = message.text.strip()
    
    if not response_text:
        text = "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:triggers")]
        ])
        await process_user_input(bot, message, text, keyboard, state=state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    trigger_text = data.get('trigger_text')
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –≤ –ë–î
    async with async_session_local() as session:
        new_trigger = Trigger(
            trigger_text=trigger_text,
            response_text=response_text,
            is_active=True,
            trigger_count=0
        )
        session.add(new_trigger)
        await session.commit()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    last_message_id = data.get('last_bot_message_id') or data.get('last_message_id')
    
    await state.clear()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º message_id –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    if last_message_id:
        await state.update_data(last_message_id=last_message_id)
    
    text = (
        f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –≤–∫–ª—é—á—ë–Ω!\n\n"
        f"üî§ –¢—Ä–∏–≥–≥–µ—Ä: <code>{trigger_text}</code>\n"
        f"üí¨ –û—Ç–≤–µ—Ç: <code>{response_text}</code>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º", callback_data="admin:triggers")]
    ])
    
    await process_user_input(bot, message, text, keyboard, state=state)


async def handle_trigger_toggle(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–≤–∫–ª/–≤—ã–∫–ª)"""
    trigger_id = int(query.data.split(':')[1])
    
    async with async_session_local() as session:
        result = await session.execute(select(Trigger).filter_by(id=trigger_id))
        trigger = result.scalar_one_or_none()
        
        if trigger:
            trigger.is_active = not trigger.is_active
            await session.commit()
            
            status = "–≤–∫–ª—é—á—ë–Ω" if trigger.is_active else "–≤—ã–∫–ª—é—á–µ–Ω"
            await query.answer(f"–¢—Ä–∏–≥–≥–µ—Ä {status}")
        else:
            await query.answer("–¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    await show_triggers_menu(query, state, async_session_local, bot)


async def handle_trigger_delete(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä"""
    trigger_id = int(query.data.split(':')[1])
    
    async with async_session_local() as session:
        result = await session.execute(select(Trigger).filter_by(id=trigger_id))
        trigger = result.scalar_one_or_none()
        
        if trigger:
            await session.delete(trigger)
            await session.commit()
            await query.answer("–¢—Ä–∏–≥–≥–µ—Ä —É–¥–∞–ª—ë–Ω")
        else:
            await query.answer("–¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    await show_triggers_menu(query, state, async_session_local, bot)


async def handle_triggers_pagination(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    try:
        await query.answer()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ callback —É–∂–µ –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω
    
    page = int(query.data.split(':')[1])
    await show_triggers_menu(query, state, async_session_local, bot, page, answer_callback=False)