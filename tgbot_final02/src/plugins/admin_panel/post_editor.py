"""
FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
"""

import logging
from datetime import datetime, timedelta
from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from sqlalchemy.future import select

from models.base import ChatInfo, ScheduledPost
from .keyboards import (
    get_topic_selection_keyboard,
    get_time_selection_keyboard,
    get_media_selection_keyboard,
    get_confirm_keyboard,
    get_back_to_menu_keyboard,
    get_buttons_settings_keyboard
)
from .message_utils import edit_message, send_message, process_user_input

logger = logging.getLogger(__name__)


async def safe_answer_callback(query: CallbackQuery):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query"""
    try:
        await query.answer()
    except Exception as e:
        logger.debug(f"Failed to answer callback query: {e}")




class PostEditorStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    CHOOSE_TOPIC = State()
    CHOOSE_TIME = State()
    WAITING_TEXT = State()
    WAITING_MEDIA = State()
    MEDIA_INPUT = State()  # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∑–∞–º–µ–Ω—ã –º–µ–¥–∏–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–∞—Ö
    BUTTONS_SETTINGS = State()
    WAITING_BUTTON_TEXT = State()
    WAITING_BUTTON_URL = State()
    CONFIRM = State()
    EDITING_TEXT = State()
    EDITING_TIME = State()  # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞


async def start_post_creation(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await safe_answer_callback(query)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    await state.clear()
    logger.debug(f"üßπ START_POST_CREATION: Cleared FSM state before starting new post creation")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –∏–∑ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
    async with async_session_local() as session:
        result = await session.execute(
            select(ChatInfo.chat_id, ChatInfo.topic_id, ChatInfo.topic_name).distinct()
        )
        topics = []
        seen_combinations = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        
        for row in result:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã (chat_id < 0)
            if row.chat_id >= 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
                
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ chat_id + topic_id
            combination_key = (row.chat_id, row.topic_id)
            if combination_key not in seen_combinations:
                topics.append({
                    'chat_id': row.chat_id,
                    'topic_id': row.topic_id,
                    'topic_name': row.topic_name
                })
                seen_combinations.add(combination_key)
    
    if not topics:
        text = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π —Ç–æ–ø–∏–∫, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –∑–¥–µ—Å—å."
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ø–∏–∫–∞
    keyboard = get_topic_selection_keyboard(topics)
    text = "üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>"
    
    await edit_message(query, text, keyboard, "HTML", bot)
    
    await state.set_state(PostEditorStates.CHOOSE_TOPIC)


async def handle_topic_selection(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–∏–∫–∞"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º callback_data: post_editor:topic:{topic_id}:{chat_id}
    parts = query.data.split(":")
    topic_data = parts[2]
    chat_id = int(parts[3]) if len(parts) > 3 else None
    
    if topic_data == "general":
        topic_id = None
        topic_name = "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
    else:
        topic_id = int(topic_data)
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –∏–∑ –ë–î
        async with async_session_local() as session:
            result = await session.execute(
                select(ChatInfo.topic_name).filter_by(topic_id=topic_id)
            )
            topic_name = result.scalar_one_or_none() or f"–¢–æ–ø–∏–∫ {topic_id}"
    
    if not chat_id:
        text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —á–∞—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ
    logger.info(f"Selected topic: topic_id={topic_id}, topic_name={topic_name}, chat_id={chat_id}, chat_type={'group' if chat_id < 0 else 'private'}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫ –∏ —á–∞—Ç
    await state.update_data(
        topic_id=topic_id,
        topic_name=topic_name,
        chat_id=chat_id
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    keyboard = get_time_selection_keyboard()
    text = f"‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n–¢–æ–ø–∏–∫: {topic_name}"
    
    await edit_message(query, text, keyboard, "HTML", bot)
    
    await state.set_state(PostEditorStates.CHOOSE_TIME)


async def handle_time_selection(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º callback_data: post_editor:time:{time_option}
    time_option = query.data.split(":")[2]
    
    if time_option == "now":
        publish_time = datetime.now()
        time_display = "–°–µ–π—á–∞—Å"
    elif time_option == "5min":
        publish_time = datetime.now() + timedelta(minutes=5)
        time_display = "–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"
    elif time_option == "1hour":
        publish_time = datetime.now() + timedelta(hours=1)
        time_display = "–ß–µ—Ä–µ–∑ 1 —á–∞—Å"
    elif time_option == "1day":
        publish_time = datetime.now() + timedelta(days=1)
        time_display = "–ß–µ—Ä–µ–∑ 1 –¥–µ–Ω—å"
    elif time_option == "manual":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é
        data = await state.get_data()
        topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
        
        text = (f"‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
                f"–¢–æ–ø–∏–∫: {topic_name}\n\n"
                f"–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°\n"
                f"–ü—Ä–∏–º–µ—Ä: 25.12.2024 15:30 –∏–ª–∏ 25.12.2024 15:30:45")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        has_media = (query.message.photo or query.message.video or query.message.document or 
                    query.message.audio or query.message.voice or query.message.video_note)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(last_message_id=query.message.message_id)
        
        await state.set_state(PostEditorStates.CHOOSE_TIME)
        return
    else:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await state.update_data(
        publish_time=publish_time,
        time_display=time_display
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞
    data = await state.get_data()
    topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
    
    text = (f"üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>\n\n"
            f"–¢–æ–ø–∏–∫: {topic_name}\n"
            f"–í—Ä–µ–º—è: {time_display}")
    
    logger.debug(f"‚úèÔ∏è HANDLE_TIME_SELECTION: Editing message to show text input prompt")
    await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    logger.debug(f"üíæ HANDLE_TIME_SELECTION: Saving message_id {query.message.message_id} for future deletion")
    await state.update_data(last_message_id=query.message.message_id)
    
    logger.debug(f"üîÑ HANDLE_TIME_SELECTION: Setting state to WAITING_TEXT")
    await state.set_state(PostEditorStates.WAITING_TEXT)
    logger.debug(f"üèÅ HANDLE_TIME_SELECTION: Time selection processing completed")


async def handle_manual_time_input(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä—É—á–Ω—É—é"""
    logger.info(f"Manual time input: {message.text}")
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°
        time_str = message.text.strip()
        publish_time = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
        try:
            publish_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M:%S")
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å–µ–∫—É–Ω–¥ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º :00)
            publish_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
            # –û–±–Ω–æ–≤–ª—è–µ–º time_str –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
            time_str = publish_time.strftime("%d.%m.%Y %H:%M:%S")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if publish_time <= datetime.now():
            await process_user_input(
                bot, message,
                text="‚ùå –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_back_to_menu_keyboard(),
                state=state
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
        await state.update_data(
            publish_time=publish_time,
            time_display=time_str
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞
        data = await state.get_data()
        topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
        
        # –°–Ω–∞—á–∞–ª–∞ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ WAITING_TEXT
        await state.set_state(PostEditorStates.WAITING_TEXT)
        
        # –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º process_user_input –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        await process_user_input(
            bot, message,
            text=f"üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:</b>\n\n"
                 f"–¢–æ–ø–∏–∫: {topic_name}\n"
                 f"–í—Ä–µ–º—è: {time_str}",
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="HTML",
            state=state
        )
        
    except ValueError:
        await process_user_input(
            bot, message,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                 "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (—Å–µ–∫—É–Ω–¥—ã –±—É–¥—É—Ç :00)\n"
                 "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–° (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–µ–∫—É–Ω–¥)\n\n"
                 "–ü—Ä–∏–º–µ—Ä—ã:\n"
                 "‚Ä¢ 25.12.2024 15:30\n"
                 "‚Ä¢ 25.12.2024 15:30:17",
            reply_markup=get_back_to_menu_keyboard(),
            state=state
        )


async def handle_text_input(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    # Processing text input
    
    text = message.text.strip() if message.text else ""
    
    if not text:
        # Empty text provided
        await process_user_input(
            bot, message,
            text="‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
            reply_markup=get_back_to_menu_keyboard(),
            state=state
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    await state.update_data(text=text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ–¥–∏–∞
    data = await state.get_data()
    topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
    time_display = data.get('time_display', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    keyboard = get_media_selection_keyboard()
    await process_user_input(
        bot, message,
        text=f"üñºÔ∏è <b>–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</b>\n\n"
             f"–¢–æ–ø–∏–∫: {topic_name}\n"
             f"–í—Ä–µ–º—è: {time_display}\n"
             f"–¢–µ–∫—Å—Ç: {text[:100]}{'...' if len(text) > 100 else ''}",
        reply_markup=keyboard,
        parse_mode="HTML",
        state=state
    )
    
    await state.set_state(PostEditorStates.WAITING_MEDIA)


async def handle_media_selection(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–¥–∏–∞"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º callback_data: post_editor:media:{action}
    action = query.data.split(":")[2]
    
    if action == "skip":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞
        await state.update_data(media_type=None, media_file_id=None)
        await show_buttons_settings(query, state, async_session_local, bot)
    elif action == "add":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª—é–±–æ–µ –º–µ–¥–∏–∞
        data = await state.get_data()
        topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
        time_display = data.get('time_display', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        text = data.get('text', '')
        
        text_message = (f"üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç):</b>\n\n"
                        f"–¢–æ–ø–∏–∫: {topic_name}\n"
                        f"–í—Ä–µ–º—è: {time_display}\n"
                        f"–¢–µ–∫—Å—Ç: {text[:100]}{'...' if len(text) > 100 else ''}")
        
        await edit_message(query, text_message, get_back_to_menu_keyboard(), "HTML", bot)
        
        await state.set_state(PostEditorStates.WAITING_MEDIA)


async def handle_media_input(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ–¥–∏–∞"""
    logger.debug(f"üîÑ HANDLE_MEDIA_INPUT: Starting media input processing")
    logger.debug(f"üë§ HANDLE_MEDIA_INPUT: User message ID: {message.message_id}, Chat ID: {message.chat.id}")
    
    media_file_id = None
    media_type = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ (–ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π)
    if message.photo:
        media_file_id = message.photo[-1].file_id
        media_type = "photo"
        # Photo detected
    elif message.video:
        media_file_id = message.video.file_id
        media_type = "video"
        # Video detected
    elif message.document:
        media_file_id = message.document.file_id
        media_type = "document"
        # Document detected
    elif message.audio:
        media_file_id = message.audio.file_id
        media_type = "audio"
        # Audio detected
    elif message.voice:
        media_file_id = message.voice.file_id
        media_type = "voice"
        # Voice detected
    elif message.video_note:
        media_file_id = message.video_note.file_id
        media_type = "video_note"
        # Video note detected
    else:
        # Unsupported media type
        await process_user_input(
            bot, message,
            text="‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=get_back_to_menu_keyboard(),
            state=state
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞
    await state.update_data(
        media_type=media_type,
        media_file_id=media_file_id
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —É–¥–∞–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    await show_buttons_settings_from_message(message, state, async_session_local, bot)


async def show_confirmation(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    
    topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
    time_display = data.get('time_display', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    text = data.get('text', '')
    media_type = data.get('media_type')
    buttons = data.get('buttons', [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</b>\n\n"
    confirm_text += f"üìç –¢–æ–ø–∏–∫: {topic_name}\n"
    confirm_text += f"‚è∞ –í—Ä–µ–º—è: {time_display}\n"
    confirm_text += f"üìù –¢–µ–∫—Å—Ç: {text}\n"
    
    if media_type:
        media_emoji = {"photo": "üì∑", "video": "üé•", "document": "üìÑ"}
        confirm_text += f"üñºÔ∏è –ú–µ–¥–∏–∞: {media_emoji.get(media_type, 'üìé')} {media_type}\n"
    else:
        confirm_text += "üñºÔ∏è –ú–µ–¥–∏–∞: –ù–µ—Ç\n"
    
    if buttons:
        confirm_text += f"üîò –ö–Ω–æ–ø–∫–∏: {len(buttons)} —à—Ç.\n"
        for i, button in enumerate(buttons, 1):
            confirm_text += f"  {i}. {button.get('text', '')}\n"
    else:
        confirm_text += "üîò –ö–Ω–æ–ø–∫–∏: –ù–µ—Ç\n"
    
    keyboard = get_confirm_keyboard()
    
    await edit_message(query, confirm_text, keyboard, "HTML", bot)
    
    await state.set_state(PostEditorStates.CONFIRM)


async def show_confirmation_from_message(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    logger.info(f"üîÑ SHOW_CONFIRMATION_FROM_MESSAGE: Starting confirmation display")
    logger.info(f"üë§ SHOW_CONFIRMATION_FROM_MESSAGE: User message ID: {message.message_id}, Chat ID: {message.chat.id}")
    
    data = await state.get_data()
    
    topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
    time_display = data.get('time_display', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    text = data.get('text', '')
    media_type = data.get('media_type')
    media_file_id = data.get('media_file_id')
    
    logger.info(f"üìä SHOW_CONFIRMATION_FROM_MESSAGE: Topic: {topic_name}, Time: {time_display}, Media: {media_type}")
    
    keyboard = get_confirm_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    if media_type and media_file_id:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å: —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –ø–æ—Ç–æ–º –¥–µ—Ç–∞–ª–∏
        caption = f"üìù {text}\n\nüìç –¢–æ–ø–∏–∫: {topic_name}\n‚è∞ –í—Ä–µ–º—è: {time_display}\n\n‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</b>"
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–¥–∏–∞
        logger.info(f"üóëÔ∏è SHOW_CONFIRMATION_FROM_MESSAGE: Deleting user media message {message.message_id}")
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            logger.info(f"‚úÖ SHOW_CONFIRMATION_FROM_MESSAGE: Successfully deleted user media message {message.message_id}")
        except Exception as delete_error:
            logger.warning(f"‚ö†Ô∏è SHOW_CONFIRMATION_FROM_MESSAGE: Failed to delete user media message: {delete_error}")
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        data = await state.get_data()
        last_message_id = data.get('last_message_id')
        if last_message_id:
            logger.info(f"üóëÔ∏è SHOW_CONFIRMATION_FROM_MESSAGE: Deleting previous bot message {last_message_id}")
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
                logger.info(f"‚úÖ SHOW_CONFIRMATION_FROM_MESSAGE: Successfully deleted previous bot message {last_message_id}")
            except Exception as delete_error:
                logger.warning(f"‚ö†Ô∏è SHOW_CONFIRMATION_FROM_MESSAGE: Failed to delete previous bot message: {delete_error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
        logger.info(f"üì§ SHOW_CONFIRMATION_FROM_MESSAGE: Sending {media_type} with caption")
        sent_message = None
        if media_type == 'photo':
            sent_message = await bot.send_photo(
                chat_id=message.chat.id,
                photo=media_file_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ SHOW_CONFIRMATION_FROM_MESSAGE: Photo sent successfully {sent_message.message_id}")
        elif media_type == 'video':
            sent_message = await bot.send_video(
                chat_id=message.chat.id,
                video=media_file_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ SHOW_CONFIRMATION_FROM_MESSAGE: Video sent successfully {sent_message.message_id}")
        elif media_type == 'document':
            sent_message = await bot.send_document(
                chat_id=message.chat.id,
                document=media_file_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ SHOW_CONFIRMATION_FROM_MESSAGE: Document sent successfully {sent_message.message_id}")
        elif media_type == 'audio':
            sent_message = await bot.send_audio(
                chat_id=message.chat.id,
                audio=media_file_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ SHOW_CONFIRMATION_FROM_MESSAGE: Audio sent successfully {sent_message.message_id}")
        elif media_type == 'voice':
            sent_message = await bot.send_voice(
                chat_id=message.chat.id,
                voice=media_file_id,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ SHOW_CONFIRMATION_FROM_MESSAGE: Voice sent successfully {sent_message.message_id}")
        elif media_type == 'video_note':
            sent_message = await bot.send_video_note(
                chat_id=message.chat.id,
                video_note=media_file_id
            )
            logger.info(f"‚úÖ SHOW_CONFIRMATION_FROM_MESSAGE: Video note sent successfully {sent_message.message_id}")
            # –î–ª—è video_note –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç
            sent_message = await bot.send_message(
                chat_id=message.chat.id,
                text=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if sent_message:
            logger.info(f"üíæ SHOW_CONFIRMATION_FROM_MESSAGE: Saving message_id {sent_message.message_id} in FSM state")
            await state.update_data(last_message_id=sent_message.message_id)
            logger.info(f"‚úÖ SHOW_CONFIRMATION_FROM_MESSAGE: Successfully saved message_id {sent_message.message_id}")
        else:
            logger.warning(f"‚ö†Ô∏è SHOW_CONFIRMATION_FROM_MESSAGE: No message returned from media send")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        logger.info(f"üí¨ SHOW_CONFIRMATION_FROM_MESSAGE: No media, sending text only")
        text_message = f"üìù {text}\n\nüìç –¢–æ–ø–∏–∫: {topic_name}\n‚è∞ –í—Ä–µ–º—è: {time_display}\nüñºÔ∏è –ú–µ–¥–∏–∞: –ù–µ—Ç\n\n‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</b>"
        await process_user_input(
            bot, message,
            text=text_message,
            reply_markup=keyboard,
            parse_mode="HTML",
            state=state
        )
    
    logger.info(f"üîÑ SHOW_CONFIRMATION_FROM_MESSAGE: Setting state to CONFIRM")
    await state.set_state(PostEditorStates.CONFIRM)
    logger.info(f"üèÅ SHOW_CONFIRMATION_FROM_MESSAGE: Confirmation display completed")


async def confirm_post_creation(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    await safe_answer_callback(query)
    
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    topic_id = data.get('topic_id')
    topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
    chat_id = data.get('chat_id')
    publish_time = data.get('publish_time')
    text = data.get('text', '')
    media_type = data.get('media_type')
    media_file_id = data.get('media_file_id')
    buttons = data.get('buttons', [])
    
    if not chat_id:
        text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –ë–î
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        buttons_json = None
        if buttons:
            import json
            buttons_json = json.dumps(buttons)
        
        async with async_session_local() as session:
            new_post = ScheduledPost(
                chat_id=chat_id,
                topic_id=topic_id,
                publish_time=publish_time,
                text=text,
                media_file_id=media_file_id,
                media_type=media_type,
                buttons_json=buttons_json,
                status='pending'
            )
            session.add(new_post)
            await session.commit()
            
            post_id = new_post.id
        
        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        success_text = (f"‚úÖ <b>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                       f"üìç –¢–æ–ø–∏–∫: {topic_name}\n"
                       f"‚è∞ –í—Ä–µ–º—è: {data.get('time_display', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                       f"üÜî ID –ø–æ—Å—Ç–∞: {post_id}")
        
        await edit_message(query, success_text, get_back_to_menu_keyboard(), "HTML", bot)
        
        logger.info(f"Post {post_id} scheduled by admin {query.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error creating post: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        await edit_message(query, error_text, get_back_to_menu_keyboard(), "HTML", bot)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


async def handle_back_navigation(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥"""
    await safe_answer_callback(query)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫–Ω–æ–ø–æ–∫ (–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    if query.data == "post_editor:back_to_buttons":
        await show_buttons_settings(query, state, async_session_local, bot)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ (–∏–∑ –≤—ã–±–æ—Ä–∞ –º–µ–¥–∏–∞)
    if query.data == "post_editor:back_to_time":
        data = await state.get_data()
        topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
        
        keyboard = get_time_selection_keyboard()
        text = f"‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n–¢–æ–ø–∏–∫: {topic_name}"
        
        await edit_message(query, text, keyboard, "HTML", bot)
        await state.set_state(PostEditorStates.CHOOSE_TIME)
        return
    
    current_state = await state.get_state()
    
    if current_state == PostEditorStates.CHOOSE_TIME:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–æ–ø–∏–∫–∞
        await start_post_creation(query, state, async_session_local, bot)
    elif current_state == PostEditorStates.WAITING_MEDIA:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        data = await state.get_data()
        topic_name = data.get('topic_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫')
        
        keyboard = get_time_selection_keyboard()
        text = f"‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n–¢–æ–ø–∏–∫: {topic_name}"
        
        await edit_message(query, text, keyboard, "HTML", bot)
        
        await state.set_state(PostEditorStates.CHOOSE_TIME)
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from .keyboards import get_main_menu_keyboard
        text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = get_main_menu_keyboard()
        
        await edit_message(query, text, keyboard, "HTML", bot)
        await state.clear()
        logger.info(f"üßπ HANDLE_BACK_NAVIGATION: Cleared FSM state when returning to main menu")


# ===== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ù–û–ü–ö–ê–ú–ò =====

async def show_buttons_settings(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞"""
    logger.debug(f"üîç SHOW_BUTTONS_SETTINGS: Starting button settings display")
    logger.debug(f"üîç SHOW_BUTTONS_SETTINGS: Callback data: '{query.data}'")
    logger.debug(f"üîç SHOW_BUTTONS_SETTINGS: User ID: {query.from_user.id}, Chat ID: {query.message.chat.id}")
    
    data = await state.get_data()
    logger.debug(f"üîç SHOW_BUTTONS_SETTINGS: FSM state data: {data}")
    
    buttons = data.get('buttons', [])
    editing_post_id = data.get('editing_post_id')
    
    logger.debug(f"üîç SHOW_BUTTONS_SETTINGS: Buttons count: {len(buttons)}")
    logger.debug(f"üîç SHOW_BUTTONS_SETTINGS: Editing post ID: {editing_post_id}")
    logger.debug(f"üîç SHOW_BUTTONS_SETTINGS: Buttons data: {buttons}")
    
    text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞</b>\n\n"
    text += f"üìä –ö–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(buttons)}\n\n"
    
    if buttons:
        text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"
        for i, button in enumerate(buttons, 1):
            text += f"{i}. {button.get('text', '')}\n"
        text += "\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = get_buttons_settings_keyboard(buttons, editing_post_id)
    logger.debug(f"üîç SHOW_BUTTONS_SETTINGS: Generated keyboard with post_id: {editing_post_id}")
    
    await edit_message(query, text, keyboard, "HTML", bot)
    await state.set_state(PostEditorStates.BUTTONS_SETTINGS)
    logger.debug(f"‚úÖ SHOW_BUTTONS_SETTINGS: Button settings displayed successfully")


async def show_buttons_settings_from_message(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = await state.get_data()
    buttons = data.get('buttons', [])
    editing_post_id = data.get('editing_post_id')
    
    text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞</b>\n\n"
    text += f"üìä –ö–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(buttons)}\n\n"
    
    if buttons:
        text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"
        for i, button in enumerate(buttons, 1):
            text += f"{i}. {button.get('text', '')}\n"
        text += "\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = get_buttons_settings_keyboard(buttons, editing_post_id)
    await process_user_input(bot, message, text, keyboard, "HTML", state)
    await state.set_state(PostEditorStates.BUTTONS_SETTINGS)


async def handle_buttons_add(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
    await safe_answer_callback(query)
    
    text = "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:"
    keyboard = get_back_to_menu_keyboard()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    await state.update_data(last_message_id=current_message_id)
    
    await state.set_state(PostEditorStates.WAITING_BUTTON_TEXT)


async def handle_button_text_input(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
    button_text = message.text.strip() if message.text else ""
    
    if not button_text:
        await process_user_input(bot, message, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", get_back_to_menu_keyboard(), "HTML", state)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(temp_button_text=button_text)
    
    text = f"üîó <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏</b>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {button_text}\n\n–í–≤–µ–¥–∏—Ç–µ URL:"
    keyboard = get_back_to_menu_keyboard()
    
    await process_user_input(bot, message, text, keyboard, "HTML", state)
    await state.set_state(PostEditorStates.WAITING_BUTTON_URL)


async def handle_button_url_input(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL –∫–Ω–æ–ø–∫–∏"""
    button_url = message.text.strip()
    data = await state.get_data()
    button_text = data.get('temp_button_text', '')
    editing_post_id = data.get('editing_post_id')
    
    if not button_url:
        await process_user_input(bot, message, "‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", get_back_to_menu_keyboard(), "HTML", state)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
    buttons = data.get('buttons', [])
    new_button = {
        'id': len(buttons) + 1,
        'text': button_text,
        'url': button_url
    }
    buttons.append(new_button)
    
    
    await state.update_data(buttons=buttons)
    await state.update_data(temp_button_text=None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if editing_post_id:
        await save_buttons_to_post(editing_post_id, buttons, async_session_local, state)
    
    text = f"‚úÖ <b>–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
    text += f"üîò {button_text}\n"
    text += f"üîó {button_url}\n\n"
    text += f"üìä –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: {len(buttons)}\n\n"
    
    if buttons:
        text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"
        for i, btn in enumerate(buttons, 1):
            text += f"{i}. {btn.get('text', '')}\n"
        text += "\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = get_buttons_settings_keyboard(buttons, editing_post_id)
    await process_user_input(bot, message, text, keyboard, "HTML", state)
    await state.set_state(PostEditorStates.BUTTONS_SETTINGS)




async def handle_button_delete(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
    await safe_answer_callback(query)
    
    button_id = int(query.data.split(":")[2])
    data = await state.get_data()
    buttons = data.get('buttons', [])
    editing_post_id = data.get('editing_post_id')
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    buttons = [b for b in buttons if b.get('id') != button_id]
    await state.update_data(buttons=buttons)
    
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if editing_post_id:
        await save_buttons_to_post(editing_post_id, buttons, async_session_local, state)
    
    text = f"‚úÖ <b>–ö–Ω–æ–ø–∫–∞ #{button_id} —É–¥–∞–ª–µ–Ω–∞!</b>\n\n"
    text += f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–Ω–æ–ø–æ–∫: {len(buttons)}\n\n"
    
    if buttons:
        text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"
        for i, btn in enumerate(buttons, 1):
            text += f"{i}. {btn.get('text', '')}\n"
        text += "\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = get_buttons_settings_keyboard(buttons, editing_post_id)
    await edit_message(query, text, keyboard, "HTML", bot)




async def save_buttons_to_post(post_id: int, buttons: list, async_session_local: async_sessionmaker, state: FSMContext = None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç"""
    buttons_json = None
    if buttons:
        import json
        buttons_json = json.dumps(buttons)
    
    async with async_session_local() as session:
        result = await session.execute(
            select(ScheduledPost).filter_by(id=post_id)
        )
        post = result.scalar_one_or_none()
        
        if post:
            post.buttons_json = buttons_json
            await session.commit()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
            if state:
                await state.update_data(buttons_updated=True)
            
            return True
        return False


async def handle_time_edit(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º ID –ø–æ—Å—Ç–∞
    post_id = int(query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
    async with async_session_local() as session:
        result = await session.execute(
            select(ScheduledPost).filter_by(id=post_id)
        )
        post = result.scalar_one_or_none()
    
    if not post:
        await edit_message(query, "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    if post.status != 'pending':
        await edit_message(query, "‚ùå –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ —É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤", get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ
    current_time = post.publish_time.strftime("%d.%m.%Y %H:%M:%S")
    text = (f"‚è∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (—Å–µ–∫—É–Ω–¥—ã –±—É–¥—É—Ç :00)\n"
            f"‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–° (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–µ–∫—É–Ω–¥)\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ 25.12.2024 15:30\n"
            f"‚Ä¢ 25.12.2024 15:30:17")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    message_id = await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –∏ message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        editing_post_id=post_id,
        last_message_id=message_id or query.message.message_id
    )
    
    await state.set_state(PostEditorStates.EDITING_TIME)


async def handle_time_edit_input(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—Å—Ç–∞"""
    logger.info(f"Time edit input: {message.text}")
    
    data = await state.get_data()
    post_id = data.get('editing_post_id')
    
    if not post_id:
        await process_user_input(
            bot, message,
            text="‚ùå –û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_back_to_menu_keyboard(),
            state=state
        )
        await state.clear()
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°
        time_str = message.text.strip()
        publish_time = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
        try:
            publish_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M:%S")
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å–µ–∫—É–Ω–¥ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º :00)
            publish_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
            # –û–±–Ω–æ–≤–ª—è–µ–º time_str –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
            time_str = publish_time.strftime("%d.%m.%Y %H:%M:%S")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if publish_time <= datetime.now():
            await process_user_input(
                bot, message,
                text="‚ùå –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_back_to_menu_keyboard(),
                state=state
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –ë–î
        async with async_session_local() as session:
            result = await session.execute(
                select(ScheduledPost).filter_by(id=post_id)
            )
            post = result.scalar_one_or_none()
            
            if not post:
                await process_user_input(
                    bot, message,
                    text="‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_back_to_menu_keyboard(),
                    state=state
                )
                await state.clear()
                return
            
            post.publish_time = publish_time
            await session.commit()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞" –µ—Å–ª–∏ –µ—Å—Ç—å last_message_id
        data = await state.get_data()
        last_message_id = data.get('last_message_id')
        if last_message_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º handle_post_view –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        from .main import handle_post_view
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –≤ –ø–æ—Å—Ç–µ
        has_media = bool(post.media_type and post.media_file_id)
        
        if has_media:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
            # –°–æ–∑–¥–∞–µ–º fake query –¥–ª—è –≤—ã–∑–æ–≤–∞ handle_post_view —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            fake_query = type('obj', (object,), {
                'data': f"post_view:{post_id}",
                'message': type('obj', (object,), {
                    'chat': message.chat,
                    'message_id': None,  # None –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    'photo': None,
                    'video': None,
                    'document': None,
                    'audio': None,
                    'voice': None,
                    'video_note': None
                })(),
                'from_user': message.from_user,
                'id': message.message_id,
                'answer': lambda **kwargs: None
            })()
        else:
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ—Ç - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            fake_query = type('obj', (object,), {
                'data': f"post_view:{post_id}",
                'message': type('obj', (object,), {
                    'chat': message.chat,
                    'message_id': last_message_id or message.message_id,
                    'photo': None,
                    'video': None,
                    'document': None,
                    'audio': None,
                    'voice': None,
                    'video_note': None
                })(),
                'from_user': message.from_user,
                'id': message.message_id,
                'answer': lambda **kwargs: None
            })()
        
        # –í—ã–∑—ã–≤–∞–µ–º handle_post_view –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        await handle_post_view(fake_query, state, async_session_local, bot)
        
        logger.info(f"Post {post_id} time updated to {time_str} by admin {message.from_user.id}")
        
    except ValueError:
        await process_user_input(
            bot, message,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                 "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (—Å–µ–∫—É–Ω–¥—ã –±—É–¥—É—Ç :00)\n"
                 "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–° (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–µ–∫—É–Ω–¥)\n\n"
                 "–ü—Ä–∏–º–µ—Ä—ã:\n"
                 "‚Ä¢ 25.12.2024 15:30\n"
                 "‚Ä¢ 25.12.2024 15:30:17",
            reply_markup=get_back_to_menu_keyboard(),
            state=state
        )
    except Exception as e:
        logger.error(f"Error updating post time: {e}")
        await process_user_input(
            bot, message,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard(),
            state=state
        )
        await state.clear()


async def handle_media_input_for_existing_post(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–≤–≤–æ–¥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∑–∞–º–µ–Ω–∞ –º–µ–¥–∏–∞)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        post_id = data.get('editing_post_id')
        action = data.get('action')  # 'add_media' –∏–ª–∏ 'replace_media'
        
        if not post_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ—Å—Ç–∞")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ file_id
        media_type = None
        media_file_id = None
        
        if message.photo:
            media_type = 'photo'
            media_file_id = message.photo[-1].file_id
        elif message.video:
            media_type = 'video'
            media_file_id = message.video.file_id
        elif message.document:
            media_type = 'document'
            media_file_id = message.document.file_id
        elif message.audio:
            media_type = 'audio'
            media_file_id = message.audio.file_id
        elif message.voice:
            media_type = 'voice'
            media_file_id = message.voice.file_id
        elif message.video_note:
            media_type = 'video_note'
            media_file_id = message.video_note.file_id
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –ë–î
        async with async_session_local() as session:
            result = await session.execute(
                select(ScheduledPost).filter_by(id=post_id)
            )
            post = result.scalar_one_or_none()
            
            if not post:
                await message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞
            post.media_type = media_type
            post.media_file_id = media_file_id
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            data = await state.get_data()
            media_input_message_id = data.get('media_input_message_id')
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–¥–∏–∞
            try:
                await bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=message.message_id
                )
                logger.debug(f"Deleted user message {message.message_id} with media")
            except Exception as delete_error:
                logger.warning(f"Failed to delete user message: {delete_error}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∫ –ø–æ—Å—Ç—É" –∏–ª–∏ "–ó–∞–º–µ–Ω–∞ –º–µ–¥–∏–∞ –≤ –ø–æ—Å—Ç–µ"
            if media_input_message_id:
                try:
                    await bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=media_input_message_id
                    )
                    logger.debug(f"Deleted media input message {media_input_message_id}")
                except Exception as delete_error:
                    logger.warning(f"Failed to delete media input message: {delete_error}")
            
            # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
            from .main import handle_post_view
            
            # –°–æ–∑–¥–∞–µ–º fake query –¥–ª—è –≤—ã–∑–æ–≤–∞ handle_post_view
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_id = 0, —á—Ç–æ–±—ã handle_post_view –Ω–µ –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            fake_query = type('FakeQuery', (), {
                'data': f"post_view:{post_id}",
                'message': type('FakeMessage', (), {
                    'chat': message.chat,
                    'message_id': 0,  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª—è—Ç—å
                    'photo': None, 'video': None, 'document': None,
                    'audio': None, 'voice': None, 'video_note': None
                })(),
                'answer': lambda **kwargs: None
            })()
            
            # –í—ã–∑—ã–≤–∞–µ–º handle_post_view –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
            await handle_post_view(fake_query, state, async_session_local, bot)
            
            action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if action == "add_media" else "–∑–∞–º–µ–Ω–µ–Ω–æ"
            logger.info(f"‚úÖ MEDIA_UPDATED: {action_text} media for post {post_id}: {media_type}")
            
    except Exception as e:
        logger.error(f"‚ùå MEDIA_INPUT_ERROR: Failed to process media input: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
