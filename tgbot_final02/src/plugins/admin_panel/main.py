"""
–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""

import logging
from datetime import datetime
from aiogram import Dispatcher, Bot, types
from aiogram.filters import Command, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy.future import select
from sqlalchemy import func

from config import get_settings, get_logo_path
from models.base import ScheduledPost
from .keyboards import get_main_menu_keyboard, get_posts_list_keyboard, get_back_to_menu_keyboard, get_post_view_keyboard, get_posts_menu_keyboard, get_post_actions_keyboard, get_buttons_settings_keyboard, get_stats_menu_keyboard
from .message_utils import edit_message
from .post_editor import (
    start_post_creation,
    handle_topic_selection,
    handle_time_selection,
    handle_manual_time_input,
    handle_text_input,
    handle_media_selection,
    handle_media_input,
    confirm_post_creation,
    handle_back_navigation,
    process_user_input,
    PostEditorStates,
    show_buttons_settings,
    handle_buttons_add,
    handle_button_text_input,
    handle_button_url_input,
    handle_button_delete,
    handle_time_edit,
    handle_time_edit_input
)
from .admin_management import AdminManagementStates
from .triggers_management import (
    TriggerStates,
    show_triggers_menu,
    handle_trigger_add,
    handle_trigger_toggle,
    handle_trigger_delete,
    handle_trigger_text_input,
    handle_response_text_input,
    handle_triggers_pagination
)

logger = logging.getLogger(__name__)
settings = get_settings()


async def safe_answer_callback(query: CallbackQuery):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query"""
    try:
        await query.answer()
    except Exception as e:
        logger.debug(f"Failed to answer callback query: {e}")


async def get_posts_list(async_session_local, post_type: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤"""
    async with async_session_local() as session:
        result = await session.execute(
            select(ScheduledPost).filter_by(status=post_type).order_by(ScheduledPost.publish_time.desc()).limit(50)
        )
        
        posts = []
        for post in result.scalars():
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –º–µ–¥–∏–∞
            post_description = ""
            if post.text:
                post_description = post.text[:50] + '...' if len(post.text) > 50 else post.text
            else:
                post_description = "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
            if post.media_type:
                media_emoji = {
                    'photo': 'üì∑',
                    'video': 'üé•', 
                    'document': 'üìÑ',
                    'audio': 'üéµ',
                    'voice': 'üé§',
                    'video_note': 'üìπ'
                }
                media_icon = media_emoji.get(post.media_type, 'üìé')
                post_description = f"{media_icon} {post_description}"
            
            posts.append({
                'id': post.id,
                'publish_time': post.publish_time,
                'status': post.status,
                'text': post_description,
                'media_type': post.media_type,
                'media_file_id': post.media_file_id
            })
    
    return posts


class IsAdmin(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def __call__(self, obj: types.TelegramObject) -> bool:
        user_id = obj.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        is_config_admin = user_id in settings.ADMINS
        if is_config_admin:
            # User is config admin
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
        # –ü–æ–ª—É—á–∞–µ–º async_session_local –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
        from models.init_db import get_corrected_database_url
        corrected_db_url = get_corrected_database_url(settings.DATABASE_URL)
        async_engine = create_async_engine(corrected_db_url)
        AsyncSessionLocal = async_sessionmaker(async_engine, expire_on_commit=False)
        
        try:
            async with AsyncSessionLocal() as session:
                from models.base import Admin
                result = await session.execute(
                    select(Admin).filter_by(telegram_id=user_id)
                )
                db_admin = result.scalar_one_or_none()
                is_db_admin = db_admin is not None
                
                if is_db_admin:
                    # User is DB admin
                    pass
                else:
                    # User is not admin
                    pass
                
                return is_db_admin
        except Exception as e:
            logger.error(f"ADMIN_FILTER: Error checking DB admin: {e}")
            return False


async def admin_command_handler(message: Message, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    # User accessed admin panel
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu_from_message(message, state, async_session_local, bot)
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    try:
        await message.delete()
    except Exception as e:
        logger.debug(f"Failed to delete admin command: {e}")


async def show_main_menu(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    logger.info(f"üßπ SHOW_MAIN_MENU: Cleared FSM state when showing main menu")
    
    keyboard = get_main_menu_keyboard()
    caption = "üîí <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
    try:
        await bot.delete_message(
            chat_id=query.message.chat.id,
            message_id=query.message.message_id
        )
    except Exception as e:
        logger.warning(f"Failed to delete old message: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
    try:
        with open(get_logo_path(), "rb") as logo_file:
            photo = BufferedInputFile(logo_file.read(), filename="logo.png")
        await bot.send_photo(
            chat_id=query.message.chat.id,
            photo=photo,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except FileNotFoundError:
        # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=query.message.chat.id,
            text=caption,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"‚ùå Failed to send logo: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=query.message.chat.id,
            text=caption,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query
    await safe_answer_callback(query)


async def show_main_menu_from_callback(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback query (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    logger.info(f"üßπ SHOW_MAIN_MENU_FROM_CALLBACK: Cleared FSM state when showing main menu from callback")
    
    keyboard = get_main_menu_keyboard()
    caption = "üîí <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
    try:
        await bot.delete_message(
            chat_id=query.message.chat.id,
            message_id=query.message.message_id
        )
    except Exception as e:
        logger.warning(f"Failed to delete old message: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
    try:
        with open(get_logo_path(), "rb") as logo_file:
            photo = BufferedInputFile(logo_file.read(), filename="logo.png")
        await bot.send_photo(
            chat_id=query.message.chat.id,
            photo=photo,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except FileNotFoundError:
        # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=query.message.chat.id,
            text=caption,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"‚ùå Failed to send logo: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=query.message.chat.id,
            text=caption,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query
    await safe_answer_callback(query)


async def show_main_menu_from_message(message: Message, state: FSMContext, async_session_local, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    logger.info(f"üßπ SHOW_MAIN_MENU_FROM_MESSAGE: Cleared FSM state when showing main menu from message")
    
    keyboard = get_main_menu_keyboard()
    caption = "üîí <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
    try:
        with open(get_logo_path(), "rb") as logo_file:
            photo = BufferedInputFile(logo_file.read(), filename="logo.png")
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption=caption,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except FileNotFoundError:
        # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=message.chat.id,
            text=caption,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"‚ùå Failed to send logo: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=message.chat.id,
            text=caption,
            reply_markup=keyboard,
            parse_mode="HTML"
        )


async def handle_new_post(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await start_post_creation(query, state, async_session_local, bot)


async def handle_posts_list(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤"""
    await safe_answer_callback(query)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤
    await state.clear()
    logger.info(f"üßπ HANDLE_POSTS_LIST: Cleared FSM state when showing posts list")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    keyboard = get_posts_menu_keyboard()
    text = "üìã <b>–ü–æ—Å—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–æ–≤:"
    
    await edit_message(query, text, keyboard, "HTML", bot)


async def handle_posts_type_selection(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ—Å—Ç–æ–≤"""
    await safe_answer_callback(query)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –ø–æ—Å—Ç–æ–≤
    await state.clear()
    logger.info(f"üßπ HANDLE_POSTS_TYPE_SELECTION: Cleared FSM state when selecting post type")
    
    # –ü–∞—Ä—Å–∏–º —Ç–∏–ø –ø–æ—Å—Ç–æ–≤
    post_type = query.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –ë–î
    posts = await get_posts_list(async_session_local, post_type)
    
    if not posts:
        type_text = "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" if post_type == "pending" else "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ"
        text = f"üìã <b>{type_text}</b>\n\n–ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    keyboard = get_posts_list_keyboard(posts, page=0, post_type=post_type)
    type_text = "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" if post_type == "pending" else "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ"
    text = f"üìã <b>{type_text}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    await edit_message(query, text, keyboard, "HTML", bot)


async def handle_posts_pagination(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤"""
    await safe_answer_callback(query)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
    await state.clear()
    logger.info(f"üßπ HANDLE_POSTS_PAGINATION: Cleared FSM state when paginating posts")
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç–∏–ø –ø–æ—Å—Ç–æ–≤
    parts = query.data.split(":")
    page = int(parts[2])
    post_type = parts[3] if len(parts) > 3 else "pending"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –ë–î
    posts = await get_posts_list(async_session_local, post_type)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    keyboard = get_posts_list_keyboard(posts, page=page, post_type=post_type)
    type_text = "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" if post_type == "pending" else "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ"
    text = f"üìã <b>{type_text}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    await edit_message(query, text, keyboard, "HTML", bot)


async def handle_post_view(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º ID –ø–æ—Å—Ç–∞
    post_id = int(query.data.split(":")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ Telegram (–µ—Å–ª–∏ –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–Ω–æ–ø–æ–∫)
    data = await state.get_data()
    if data.get('editing_post_id') == post_id and data.get('buttons_updated'):
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ Telegram —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await update_post_in_telegram(post_id, async_session_local, bot)
        logger.info(f"üîÑ HANDLE_POST_VIEW: Updated post {post_id} in Telegram with new buttons")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ—Å—Ç–∞
    await state.clear()
    logger.info(f"üßπ HANDLE_POST_VIEW: Cleared FSM state when viewing post")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
    async with async_session_local() as session:
        result = await session.execute(
            select(ScheduledPost).filter_by(id=post_id)
        )
        post = result.scalar_one_or_none()
    
    if not post:
        text = "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
    status_emoji = {
        'pending': '‚è≥',
        'published': '‚úÖ',
        'failed': '‚ùå',
        'deleted': 'üóëÔ∏è'
    }
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if post.text:
        post_info = f"{post.text}\n\n"
    else:
        post_info = ""
    
    # –ó–∞—Ç–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    post_info += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji.get(post.status, '‚ùì')} {post.status}\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
    if post.publish_time:
        if isinstance(post.publish_time, str):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            from datetime import datetime
            try:
                publish_time = datetime.fromisoformat(post.publish_time.replace('Z', '+00:00'))
                formatted_time = publish_time.strftime("%d.%m.%Y %H:%M:%S")
            except:
                formatted_time = post.publish_time
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
            formatted_time = post.publish_time.strftime("%d.%m.%Y %H:%M:%S")
        post_info += f"‚è∞ –í—Ä–µ–º—è: {formatted_time}\n"
    
    post_info += f"üìç –¢–æ–ø–∏–∫: {post.topic_id or '–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç'}\n"
    
    if post.media_type:
        media_emoji = {
            "photo": "üì∑", 
            "video": "üé•", 
            "document": "üìÑ",
            "audio": "üéµ",
            "voice": "üé§",
            "video_note": "üìπ"
        }
        post_info += f"üñºÔ∏è –ú–µ–¥–∏–∞: {media_emoji.get(post.media_type, 'üìé')} {post.media_type}\n"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–∞—Ö
    if post.buttons_json:
        try:
            import json
            buttons_data = json.loads(post.buttons_json)
            if buttons_data:
                post_info += f"üîò –ö–Ω–æ–ø–∫–∏: {len(buttons_data)} —à—Ç.\n"
                for i, button in enumerate(buttons_data, 1):
                    post_info += f"  {i}. {button.get('text', '–ö–Ω–æ–ø–∫–∞')}\n"
        except:
            post_info += f"üîò –ö–Ω–æ–ø–∫–∏: –µ—Å—Ç—å (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞)\n"
    
    if post.published_at:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
        if isinstance(post.published_at, str):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            from datetime import datetime
            try:
                published_time = datetime.fromisoformat(post.published_at.replace('Z', '+00:00'))
                formatted_published_time = published_time.strftime("%d.%m.%Y %H:%M:%S")
            except:
                formatted_published_time = post.published_at
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
            formatted_published_time = post.published_at.strftime("%d.%m.%Y %H:%M:%S")
        post_info += f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {formatted_published_time}\n"
    
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–∞—Ö —Ñ–æ—Ä—É–º–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Telegram API
    has_media = bool(post.media_type and post.media_file_id)
    keyboard = get_post_actions_keyboard(post_id, post.status, has_media)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    if post.media_type and post.media_file_id:
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if query.message.message_id and query.message.message_id > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message_id –≤–∞–ª–∏–¥–Ω—ã–π
                try:
                    await bot.delete_message(
                        chat_id=query.message.chat.id,
                        message_id=query.message.message_id
                    )
                    logger.debug(f"Deleted old message {query.message.message_id} before showing post with media")
                except Exception as delete_error:
                    logger.warning(f"Failed to delete old message: {delete_error}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            if post.media_type == 'photo':
                await bot.send_photo(
                    chat_id=query.message.chat.id,
                    photo=post.media_file_id,
                    caption=post_info,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            elif post.media_type == 'video':
                await bot.send_video(
                    chat_id=query.message.chat.id,
                    video=post.media_file_id,
                    caption=post_info,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            elif post.media_type == 'document':
                await bot.send_document(
                    chat_id=query.message.chat.id,
                    document=post.media_file_id,
                    caption=post_info,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            elif post.media_type == 'audio':
                await bot.send_audio(
                    chat_id=query.message.chat.id,
                    audio=post.media_file_id,
                    caption=post_info,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            elif post.media_type == 'voice':
                await bot.send_voice(
                    chat_id=query.message.chat.id,
                    voice=post.media_file_id,
                    caption=post_info,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            elif post.media_type == 'video_note':
                await bot.send_video_note(
                    chat_id=query.message.chat.id,
                    video_note=post.media_file_id
                )
                # –î–ª—è video_note –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç
                await bot.send_message(
                    chat_id=query.message.chat.id,
                    text=post_info,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
        except Exception as e:
            logger.error(f"Failed to send media for post {post_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=query.message.chat.id,
                text=post_info,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if query.message.message_id and query.message.message_id > 0:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await edit_message(query, post_info, keyboard, "HTML", bot)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=query.message.chat.id,
                text=post_info,
                reply_markup=keyboard,
                parse_mode="HTML"
            )


async def handle_post_add_media(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç—É"""
    await safe_answer_callback(query)
    
    post_id = int(query.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_post_id=post_id, action="add_media")
    
    text = """üìé <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∫ –ø–æ—Å—Ç—É</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –∞—É–¥–∏–æ) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –ø–æ—Å—Ç—É.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:</b>
üì∑ –§–æ—Ç–æ
üé• –í–∏–¥–µ–æ  
üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã
üéµ –ê—É–¥–∏–æ
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
üìπ –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏

<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ—Å—Ç—É.</i>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"post_view:{post_id}")]
    ])
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(media_input_message_id=current_message_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞
    from .post_editor import PostEditorStates
    await state.set_state(PostEditorStates.MEDIA_INPUT)


async def handle_post_replace_media(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–ó–∞–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ"""
    await safe_answer_callback(query)
    
    post_id = int(query.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_post_id=post_id, action="replace_media")
    
    text = """üîÑ <b>–ó–∞–º–µ–Ω–∞ –º–µ–¥–∏–∞ –≤ –ø–æ—Å—Ç–µ</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:</b>
üì∑ –§–æ—Ç–æ
üé• –í–∏–¥–µ–æ  
üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã
üéµ –ê—É–¥–∏–æ
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
üìπ –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏

<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ—Å—Ç—É.</i>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"post_view:{post_id}")]
    ])
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(media_input_message_id=current_message_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞
    from .post_editor import PostEditorStates
    await state.set_state(PostEditorStates.MEDIA_INPUT)


async def handle_post_remove_media(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞ –∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    await safe_answer_callback(query)
    
    post_id = int(query.data.split(":")[1])
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    text = """‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞?

–ü–æ—Å—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º."""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"post_confirm_remove_media:{post_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"post_view:{post_id}")]
    ])
    
    await edit_message(query, text, keyboard, "HTML", bot)


async def handle_post_confirm_remove_media(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
    await safe_answer_callback(query)
    
    post_id = int(query.data.split(":")[1])
    
    try:
        # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞ –∏–∑ –ø–æ—Å—Ç–∞ –≤ –ë–î
        async with async_session_local() as session:
            result = await session.execute(
                select(ScheduledPost).filter_by(id=post_id)
            )
            post = result.scalar_one_or_none()
            
            if post:
                post.media_type = None
                post.media_file_id = None
                await session.commit()
                
                logger.info(f"‚úÖ MEDIA_REMOVED: Removed media from post {post_id}")
                
                # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
                await handle_post_view(query, state, async_session_local, bot)
                return
            else:
                text = "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç—É", callback_data=f"post_view:{post_id}")]
                ])
                await edit_message(query, text, keyboard, "HTML", bot)
                
    except Exception as e:
        logger.error(f"‚ùå MEDIA_REMOVE_ERROR: Failed to remove media from post {post_id}: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç—É", callback_data=f"post_view:{post_id}")]
        ])
        await edit_message(query, text, keyboard, "HTML", bot)


async def handle_antimat(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏–º–∞—Ç–∞"""
    from .antimat_settings import handle_antimat as antimat_handler
    await antimat_handler(query, state, bot, async_session_local)


async def handle_antispam(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
    from .antispam_settings import handle_antispam as antispam_handler
    await antispam_handler(query, state, bot, async_session_local)


async def handle_settings(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await safe_answer_callback(query)
    
    from .admin_management import handle_settings_menu
    await handle_settings_menu(query, state, async_session_local, bot)


async def handle_status(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    await safe_answer_callback(query)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        from .system_monitor import get_system_info, get_bot_uptime, get_resource_status_emoji
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        async with async_session_local() as session:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            result = await session.execute(
                select(ScheduledPost.status, func.count(ScheduledPost.id)).group_by(ScheduledPost.status)
            )
            post_stats = dict(result.all())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            from models.base import Membership, MessageLog
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            moderation_result = await session.execute(
                select(Membership.event_type, func.count(Membership.event_id)).group_by(Membership.event_type)
            )
            moderation_events = dict(moderation_result.all())
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
            total_messages_result = await session.execute(
                select(func.count(MessageLog.id))
            )
            total_messages = total_messages_result.scalar() or 0
            
            moderation_stats = {
                'deleted_messages': total_messages,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥–∞—Ö
                'warned_users': moderation_events.get('warn', 0),
                'banned_users': moderation_events.get('ban', 0),
                'muted_users': moderation_events.get('mute', 0),
                'kicked_users': moderation_events.get('kick', 0),
                'joined_users': moderation_events.get('join', 0),
                'left_users': moderation_events.get('leave', 0),
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        system_info = get_system_info()
        uptime = get_bot_uptime()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        status_text = "üìà <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        status_text += "ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n"
        status_text += f"‚è±Ô∏è –ê–ø—Ç–∞–π–º: {uptime}\n"
        status_text += f"üêç Python: {system_info['python_version']}\n"
        status_text += f"üíª –û–°: {system_info['platform']} {system_info['platform_version']}\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        status_text += "üíª <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n"
        cpu_emoji = get_resource_status_emoji(system_info['cpu_percent'])
        status_text += f"{cpu_emoji} CPU: {system_info['cpu_percent']:.1f}% ({system_info['cpu_count']} —è–¥–µ—Ä)\n"
        
        memory_emoji = get_resource_status_emoji(system_info['memory_percent'])
        status_text += f"{memory_emoji} RAM: {system_info['memory_percent']:.1f}% "
        status_text += f"({system_info['memory_used_gb']:.1f}/{system_info['memory_total_gb']:.1f} GB)\n"
        
        disk_emoji = get_resource_status_emoji(system_info['disk_percent'])
        status_text += f"{disk_emoji} –î–∏—Å–∫: {system_info['disk_percent']:.1f}% "
        status_text += f"({system_info['disk_used_gb']:.1f}/{system_info['disk_total_gb']:.1f} GB)\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞
        status_text += "üìù <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞</b>\n"
        status_text += f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: {post_stats.get('pending', 0)}\n"
        status_text += f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {post_stats.get('published', 0)}\n"
        status_text += f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {post_stats.get('failed', 0)}\n"
        status_text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã—Ö: {post_stats.get('deleted', 0)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        status_text += "üõ°Ô∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n"
        status_text += f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {moderation_stats['deleted_messages']}\n"
        status_text += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {moderation_stats['warned_users']}\n"
        status_text += f"üîá –ú—É—Ç–æ–≤: {moderation_stats['muted_users']}\n"
        status_text += f"üö´ –ë–∞–Ω–æ–≤: {moderation_stats['banned_users']}\n"
        status_text += f"üë¢ –ö–∏–∫–æ–≤: {moderation_stats['kicked_users']}\n"
        status_text += f"üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å: {moderation_stats['joined_users']}\n"
        status_text += f"üëã –ü–æ–∫–∏–Ω—É–ª–æ: {moderation_stats['left_users']}\n\n"
        
        # –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π
        status_text += "üîß <b>–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π</b>\n"
        status_text += "üü¢ –ê–Ω—Ç–∏—Å–ø–∞–º: –ê–∫—Ç–∏–≤–µ–Ω\n"
        status_text += "üü¢ –ê–Ω—Ç–∏–º–∞—Ç: –ê–∫—Ç–∏–≤–µ–Ω\n"
        status_text += "üü¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ê–∫—Ç–∏–≤–µ–Ω\n"
        status_text += "üü¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è: –ê–∫—Ç–∏–≤–Ω–∞\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin:main_menu")]
        ])
        await edit_message(query, status_text, keyboard, "HTML", bot)
        
    except Exception as e:
        logger.error(f"Error getting system status: {e}")
        error_text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin:main_menu")]
        ])
        await edit_message(query, error_text, keyboard, "HTML", bot)


async def handle_stats_detailed(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏."""
    await safe_answer_callback(query)
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–∫–ª–∞–¥–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    await edit_message(query, text, get_stats_menu_keyboard(), "HTML", bot)

async def handle_post_publish(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å–µ–π—á–∞—Å"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º ID –ø–æ—Å—Ç–∞
    post_id = int(query.data.split(":")[1])
    
    try:
        async with async_session_local() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
            result = await session.execute(
                select(ScheduledPost).filter_by(id=post_id)
            )
            post = result.scalar_one_or_none()
            
            if not post:
                await edit_message(query, "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", get_back_to_menu_keyboard(), "HTML", bot)
                return
            
            if post.status != 'pending':
                error_text = f"‚ùå –ü–æ—Å—Ç —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {post.status}"
                await edit_message(query, error_text, get_back_to_menu_keyboard(), "HTML", bot)
                return
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ Telegram
            try:
                # –°–æ–∑–¥–∞–µ–º reply_markup –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                reply_markup = None
                if post.buttons_json:
                    try:
                        import json
                        buttons_data = json.loads(post.buttons_json)
                        if buttons_data:
                            keyboard_buttons = []
                            for button_data in buttons_data:
                                keyboard_buttons.append([InlineKeyboardButton(
                                    text=button_data.get('text', '–ö–Ω–æ–ø–∫–∞'),
                                    url=button_data.get('url', '#')
                                )])
                            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                            logger.info(f"Post {post_id} has {len(buttons_data)} button(s)")
                    except Exception as e:
                        logger.error(f"Failed to parse buttons for post {post_id}: {e}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
                send_params = {
                    'chat_id': post.chat_id,
                    'reply_markup': reply_markup
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
                logger.info(f"Publishing post {post_id}: chat_id={post.chat_id}, topic_id={post.topic_id}, chat_id_type={'group' if post.chat_id < 0 else 'private'}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º message_thread_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if post.topic_id and post.chat_id < 0:  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π chat_id = –≥—Ä—É–ø–ø–∞
                    send_params['message_thread_id'] = post.topic_id
                    logger.info(f"Using message_thread_id={post.topic_id} for group chat")
                
                if post.media_file_id and post.media_type:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
                    send_params['caption'] = post.text
                    
                    if post.media_type == 'photo':
                        sent_message = await bot.send_photo(
                            photo=post.media_file_id,
                            **send_params
                        )
                    elif post.media_type == 'video':
                        sent_message = await bot.send_video(
                            video=post.media_file_id,
                            **send_params
                        )
                    elif post.media_type == 'document':
                        sent_message = await bot.send_document(
                            document=post.media_file_id,
                            **send_params
                        )
                    elif post.media_type == 'audio':
                        sent_message = await bot.send_audio(
                            audio=post.media_file_id,
                            **send_params
                        )
                    elif post.media_type == 'voice':
                        sent_message = await bot.send_voice(
                            voice=post.media_file_id,
                            **send_params
                        )
                    elif post.media_type == 'video_note':
                        sent_message = await bot.send_video_note(
                            video_note=post.media_file_id,
                            **send_params
                        )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    send_params['text'] = post.text
                    sent_message = await bot.send_message(**send_params)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ –≤ –ë–î
                post.status = 'published'
                post.published_at = datetime.now()
                post.published_by = query.from_user.id
                post.telegram_message_id = sent_message.message_id
                
                await session.commit()
                
                logger.info(f"Post {post_id} published immediately by admin {query.from_user.id}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                success_text = (f"‚úÖ <b>–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n"
                               f"–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await edit_message(query, success_text, get_back_to_menu_keyboard(), "HTML", bot)
                
            except Exception as e:
                logger.error(f"Failed to publish post {post_id}: {e}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
                post.status = 'failed'
                await session.commit()
                
                error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}"
                
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—à–∏–±–∫–∏
                await edit_message(query, error_text, get_back_to_menu_keyboard(), "HTML", bot)
            
    except Exception as e:
        logger.error(f"Error publishing post {post_id}: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—à–∏–±–∫–∏
        await edit_message(query, error_text, get_back_to_menu_keyboard(), "HTML", bot)


async def handle_post_delete(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º ID –ø–æ—Å—Ç–∞
    post_id = int(query.data.split(":")[1])
    
    try:
        async with async_session_local() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
            result = await session.execute(
                select(ScheduledPost).filter_by(id=post_id)
            )
            post = result.scalar_one_or_none()
            
            if not post:
                text = "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
                return
            
            # –ï—Å–ª–∏ –ø–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ Telegram
            if post.status == 'published' and post.telegram_message_id:
                try:
                    await bot.delete_message(
                        chat_id=post.chat_id,
                        message_id=post.telegram_message_id
                    )
                    logger.info(f"Deleted message {post.telegram_message_id} from chat {post.chat_id}")
                except Exception as e:
                    logger.warning(f"Failed to delete message from Telegram: {e}")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
            await session.delete(post)
            await session.commit()
            
            logger.info(f"Post {post_id} deleted by admin {query.from_user.id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            success_text = (f"‚úÖ <b>–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                           f"–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑ —á–∞—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω).")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await edit_message(query, success_text, get_back_to_menu_keyboard(), "HTML", bot)
            
    except Exception as e:
        logger.error(f"Error deleting post {post_id}: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—à–∏–±–∫–∏
        await edit_message(query, error_text, get_back_to_menu_keyboard(), "HTML", bot)


async def update_post_in_telegram(post_id: int, async_session_local, bot: Bot):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ Telegram —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        async with async_session_local() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
            result = await session.execute(
                select(ScheduledPost).filter_by(id=post_id)
            )
            post = result.scalar_one_or_none()
            
            if not post or post.status != 'published' or not post.telegram_message_id:
                return
            
            # –°–æ–∑–¥–∞–µ–º reply_markup –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            reply_markup = None
            if post.buttons_json:
                try:
                    import json
                    buttons_data = json.loads(post.buttons_json)
                    if buttons_data:
                        keyboard_buttons = []
                        for button_data in buttons_data:
                            keyboard_buttons.append([InlineKeyboardButton(
                                text=button_data.get('text', '–ö–Ω–æ–ø–∫–∞'),
                                url=button_data.get('url', '#')
                            )])
                        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                except Exception as e:
                    logger.error(f"Failed to parse buttons for post {post_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            if post.media_type and post.media_file_id:
                # –î–ª—è –º–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                await bot.edit_message_caption(
                    chat_id=post.chat_id,
                    message_id=post.telegram_message_id,
                    caption=post.text,
                    reply_markup=reply_markup
                )
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await bot.edit_message_text(
                    chat_id=post.chat_id,
                    message_id=post.telegram_message_id,
                    text=post.text,
                    reply_markup=reply_markup
                )
            
            logger.info(f"‚úÖ Updated post {post_id} in Telegram with buttons")
            
    except Exception as e:
        logger.error(f"‚ùå Failed to update post {post_id} in Telegram: {e}")


async def handle_post_edit(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º ID –ø–æ—Å—Ç–∞
    post_id = int(query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
    async with async_session_local() as session:
        result = await session.execute(
            select(ScheduledPost).filter_by(id=post_id)
        )
        post = result.scalar_one_or_none()
    
    if not post:
        text = "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ Telegram
    can_edit_telegram = False
    if post.status == 'published' and post.published_at:
        from datetime import datetime, timedelta
        now = datetime.now()
        if isinstance(post.published_at, str):
            published_at = datetime.fromisoformat(post.published_at.replace('Z', '+00:00'))
        else:
            published_at = post.published_at
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –º–µ–Ω–µ–µ 48 —á–∞—Å–æ–≤
        if now - published_at.replace(tzinfo=None) < timedelta(hours=48):
            can_edit_telegram = True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(editing_post_id=post_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    post_info = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post_id}</b>\n\n"
    post_info += f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {post.text}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if post.status == 'scheduled':
        post_info += "üìÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω - –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
    elif can_edit_telegram:
        post_info += "‚úÖ –ü–æ—Å—Ç –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤ Telegram (–º–µ–Ω–µ–µ 48 —á–∞—Å–æ–≤)\n\n"
    else:
        post_info += "‚ö†Ô∏è –ü–æ—Å—Ç —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Telegram –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n\n"
    
    post_info += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º message_id
    logger.info(f"üîÑ START_POST_EDIT: Calling edit_message for post {post_id}")
    current_message_id = await edit_message(query, post_info, get_back_to_menu_keyboard(), "HTML", bot)
    logger.info(f"üìù START_POST_EDIT: edit_message returned message_id: {current_message_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    logger.info(f"üíæ START_POST_EDIT: Saving message_id {current_message_id} in FSM state for future deletion")
    await state.update_data(last_message_id=current_message_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    data_check = await state.get_data()
    saved_message_id = data_check.get('last_message_id')
    logger.info(f"‚úÖ START_POST_EDIT: Verified saved message_id in FSM: {saved_message_id}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    from .post_editor import PostEditorStates
    await state.set_state(PostEditorStates.EDITING_TEXT)
    logger.info(f"üèÅ START_POST_EDIT: Post edit started for post {post_id}")


async def handle_existing_post_button_add(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Å—Ç—É"""
    await safe_answer_callback(query)
    
    # –ü–æ–ª—É—á–∞–µ–º post_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫)
    data = await state.get_data()
    post_id = data.get('editing_post_id')
    
    if not post_id:
        text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ—Å—Ç–∞"
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º post_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(editing_post_id=post_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    text = "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:"
    keyboard = get_back_to_menu_keyboard()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    current_message_id = await edit_message(query, text, keyboard, "HTML", bot)
    await state.update_data(last_message_id=current_message_id)
    
    from .post_editor import PostEditorStates
    await state.set_state(PostEditorStates.WAITING_BUTTON_TEXT)


async def handle_post_buttons(query: CallbackQuery, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å—Ç–∞"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º callback_data: post_buttons:{post_id}
    parts = query.data.split(":")
    
    if len(parts) < 2:
        text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã"
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —á–∏—Å–ª–æ (ID –ø–æ—Å—Ç–∞)
    if not parts[1].isdigit():
        text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞"
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    try:
        post_id = int(parts[1])
    except ValueError:
        text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞"
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
    async with async_session_local() as session:
        result = await session.execute(
            select(ScheduledPost).filter_by(id=post_id)
        )
        post = result.scalar_one_or_none()
    
    if not post:
        text = "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        await edit_message(query, text, get_back_to_menu_keyboard(), "HTML", bot)
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ JSON
    buttons = []
    if post.buttons_json:
        import json
        try:
            buttons = json.loads(post.buttons_json)
        except:
            buttons = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(
        editing_post_id=post_id,
        buttons=buttons
    )
    
    text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–∞ #{post_id}</b>\n\n"
    text += f"üìä –ö–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(buttons)}\n\n"
    
    if buttons:
        text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"
        for i, button in enumerate(buttons, 1):
            text += f"{i}. {button.get('text', '')}\n"
        text += "\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = get_buttons_settings_keyboard(buttons, post_id)
    await edit_message(query, text, keyboard, "HTML", bot)
    await state.set_state(PostEditorStates.BUTTONS_SETTINGS)




async def handle_text_edit(message: Message, state: FSMContext, async_session_local, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    logger.info(f"üîÑ HANDLE_TEXT_EDIT: Starting text edit processing")
    logger.info(f"üë§ HANDLE_TEXT_EDIT: User message ID: {message.message_id}, Chat ID: {message.chat.id}")
    logger.info(f"üìù HANDLE_TEXT_EDIT: New text: {message.text[:50]}...")
    
    new_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    post_id = data.get('editing_post_id')
    last_message_id = data.get('last_message_id')
    
    logger.info(f"üîç HANDLE_TEXT_EDIT: FSM state data: {data}")
    logger.info(f"üîç HANDLE_TEXT_EDIT: Editing post ID: {post_id}")
    logger.info(f"üîç HANDLE_TEXT_EDIT: Last message ID from FSM: {last_message_id}")
    
    if not post_id:
        logger.error(f"‚ùå HANDLE_TEXT_EDIT: No post ID found in state")
        await process_user_input(
            bot, message,
            text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            reply_markup=get_back_to_menu_keyboard(),
            state=state
        )
        await state.clear()
        return
    
    try:
        async with async_session_local() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –ë–î
            result = await session.execute(
                select(ScheduledPost).filter_by(id=post_id)
            )
            post = result.scalar_one_or_none()
            
            if not post:
                logger.error(f"‚ùå HANDLE_TEXT_EDIT: Post {post_id} not found in database")
                await process_user_input(
                    bot, message,
                    text="‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_back_to_menu_keyboard(),
                    state=state
                )
                await state.clear()
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ë–î
            post.text = new_text
            await session.commit()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –≤ Telegram, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            telegram_updated = False
            if post.status == 'published' and post.telegram_message_id:
                try:
                    from datetime import datetime, timedelta
                    now = datetime.now()
                    if isinstance(post.published_at, str):
                        published_at = datetime.fromisoformat(post.published_at.replace('Z', '+00:00'))
                    else:
                        published_at = post.published_at
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –º–µ–Ω–µ–µ 48 —á–∞—Å–æ–≤
                    if now - published_at.replace(tzinfo=None) < timedelta(hours=48):
                        # –°–æ–∑–¥–∞–µ–º reply_markup –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                        reply_markup = None
                        if post.buttons_json:
                            try:
                                import json
                                buttons_data = json.loads(post.buttons_json)
                                if buttons_data:
                                    keyboard_buttons = []
                                    for button_data in buttons_data:
                                        keyboard_buttons.append([InlineKeyboardButton(
                                            text=button_data.get('text', '–ö–Ω–æ–ø–∫–∞'),
                                            url=button_data.get('url', '#')
                                        )])
                                    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                                    logger.info(f"üîç HANDLE_TEXT_EDIT: Post {post_id} has {len(buttons_data)} button(s) for Telegram update")
                            except Exception as e:
                                logger.error(f"‚ùå HANDLE_TEXT_EDIT: Failed to parse buttons for post {post_id}: {e}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                        if post.media_type and post.media_file_id:
                            # –î–ª—è –º–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                            await bot.edit_message_caption(
                                chat_id=post.chat_id,
                                message_id=post.telegram_message_id,
                                caption=new_text,
                                reply_markup=reply_markup
                            )
                        else:
                            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                            await bot.edit_message_text(
                                chat_id=post.chat_id,
                                message_id=post.telegram_message_id,
                                text=new_text,
                                reply_markup=reply_markup
                            )
                        telegram_updated = True
                        logger.info(f"Updated post {post_id} in Telegram")
                except Exception as e:
                    logger.warning(f"Failed to update post {post_id} in Telegram: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if telegram_updated:
                success_text = (f"‚úÖ <b>–ü–æ—Å—Ç #{post_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                               f"–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤ Telegram.")
                logger.info(f"‚úÖ HANDLE_TEXT_EDIT: Post {post_id} updated in both DB and Telegram")
            else:
                success_text = (f"‚úÖ <b>–ü–æ—Å—Ç #{post_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
                               f"–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Telegram –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ "
                               f"(–ø–æ—Å—Ç —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤ –∏–ª–∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω).")
                logger.info(f"‚úÖ HANDLE_TEXT_EDIT: Post {post_id} updated in DB only")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç—É"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ—Å—Ç—É", callback_data=f"post_view:{post_id}")]
            ])
            
            await process_user_input(
                bot, message,
                text=success_text,
                reply_markup=keyboard,
                parse_mode="HTML",
                state=state
            )
            
            logger.info(f"‚úÖ HANDLE_TEXT_EDIT: Post {post_id} text updated by admin {message.from_user.id}")
            
    except Exception as e:
        logger.error(f"‚ùå HANDLE_TEXT_EDIT: Error editing post {post_id}: {e}")
        await process_user_input(
            bot, message,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_menu_keyboard(),
            state=state
        )
    
    logger.info(f"üèÅ HANDLE_TEXT_EDIT: Text edit processing completed")
    await state.clear()


def register(dp: Dispatcher, bot: Bot, async_session_local):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø async_session_local
    from sqlalchemy.ext.asyncio import async_sessionmaker
    if not isinstance(async_session_local, async_sessionmaker):
        logger.error(f"‚ùå ERROR: async_session_local is not async_sessionmaker, got {type(async_session_local)}")
        return
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ë—Ä—Ç–æ–∫
    def make_antispam_handler(func):
        async def wrapper(callback: CallbackQuery, state: FSMContext, bot: Bot):
            await func(callback, state, bot, async_session_local)
        return wrapper
    
    def make_antispam_message_handler(func):
        async def wrapper(message: Message, state: FSMContext, bot: Bot):
            await func(message, state, bot, async_session_local)
        return wrapper
    
    def make_antimat_handler(func):
        async def wrapper(callback: CallbackQuery, state: FSMContext, bot: Bot):
            await func(callback, state, bot, async_session_local)
        return wrapper
    
    def make_antimat_message_handler(func):
        async def wrapper(message: Message, state: FSMContext, bot: Bot):
            await func(message, state, bot, async_session_local)
        return wrapper
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Å async_session_local
    async def admin_command_wrapper(message, state):
        return await admin_command_handler(message, state, async_session_local, bot)
    
    # –ö–æ–º–∞–Ω–¥–∞ /admin
    dp.message.register(
        admin_command_wrapper,
        Command("admin"),
        IsAdmin()
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è callback —Ñ—É–Ω–∫—Ü–∏–π
    async def show_main_menu_wrapper(query, state):
        return await show_main_menu_from_callback(query, state, async_session_local, bot)
    
    async def handle_new_post_wrapper(query, state):
        return await handle_new_post(query, state, async_session_local, bot)
    
    async def handle_posts_list_wrapper(query, state):
        return await handle_posts_list(query, state, async_session_local, bot)
    
    async def handle_posts_pagination_wrapper(query, state):
        return await handle_posts_pagination(query, state, async_session_local, bot)
    
    async def handle_post_view_wrapper(query, state):
        return await handle_post_view(query, state, async_session_local, bot)
    
    async def handle_antimat_wrapper(query, state):
        return await handle_antimat(query, state, async_session_local, bot)
    
    async def handle_antispam_wrapper(query, state):
        return await handle_antispam(query, state, async_session_local, bot)
    
    async def handle_settings_wrapper(query, state):
        return await handle_settings(query, state, async_session_local, bot)
    
    async def handle_status_wrapper(query, state):
        return await handle_status(query, state, async_session_local, bot)

    async def handle_stats_detailed_wrapper(query, state):
        return await handle_stats_detailed(query, state, async_session_local, bot)

    async def handle_stats_overall_wrapper(query, state):
        await safe_answer_callback(query)
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            chat_id = query.message.chat.id
            if chat_id > 0:
                from models.base import MessageLog
                async with async_session_local() as session:
                    result = await session.execute(
                        select(MessageLog.chat_id, func.count(MessageLog.id))
                        .where(MessageLog.chat_id < 0)
                        .group_by(MessageLog.chat_id)
                        .order_by(func.count(MessageLog.id).desc())
                        .limit(1)
                    )
                    row = result.first()
                    if row:
                        chat_id = row[0]
                    else:
                        await edit_message(query, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º.", get_stats_menu_keyboard(), "HTML", bot)
                        return
            from plugins.stats_plugin import handle_stats_command
            class MsgWrap:
                def __init__(self, chat_id, from_user_id):
                    from types import SimpleNamespace
                    self.chat = SimpleNamespace(id=chat_id)
                    self.from_user = SimpleNamespace(id=from_user_id)
                async def answer(self, text, parse_mode=None):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:stats_detailed")]])
                    await edit_message(query, text, kb, parse_mode or "HTML", bot)
                async def delete(self):
                    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å delete_command_message
                    pass
            msg = MsgWrap(chat_id, query.from_user.id)
            await handle_stats_command(message=msg, bot=bot, async_session_local=async_session_local)
        except Exception as e:
            logger.error(f"Failed to build overall stats: {e}")
            await edit_message(query, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", get_stats_menu_keyboard(), "HTML", bot)

    async def handle_stats_invites_wrapper(query, state):
        await safe_answer_callback(query)
        try:
            from plugins.invite_stats import show_invite_page
            await show_invite_page(query, bot, async_session_local)
        except Exception as e:
            logger.error(f"Error loading invite stats: {e}")
            text = (
                "üîó <b>–ò–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–∏</b>\n\n"
                "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–æ–∫."
            )
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:stats_detailed")]])
            await edit_message(query, text, kb, "HTML", bot)
    
    async def handle_post_delete_wrapper(query, state):
        return await handle_post_delete(query, state, async_session_local, bot)
    
    async def handle_post_publish_wrapper(query, state):
        return await handle_post_publish(query, state, async_session_local, bot)
    
    async def handle_posts_type_selection_wrapper(query, state):
        return await handle_posts_type_selection(query, state, async_session_local, bot)
    
    async def handle_post_edit_wrapper(query, state):
        return await handle_post_edit(query, state, async_session_local, bot)
    
    async def handle_post_buttons_wrapper(query, state):
        return await handle_post_buttons(query, state, async_session_local, bot)
    
    async def handle_post_add_media_wrapper(query, state):
        return await handle_post_add_media(query, state, async_session_local, bot)
    
    async def handle_post_replace_media_wrapper(query, state):
        return await handle_post_replace_media(query, state, async_session_local, bot)
    
    async def handle_post_remove_media_wrapper(query, state):
        return await handle_post_remove_media(query, state, async_session_local, bot)
    
    async def handle_post_confirm_remove_media_wrapper(query, state):
        return await handle_post_confirm_remove_media(query, state, async_session_local, bot)
    
    
    async def handle_text_edit_wrapper(message, state):
        return await handle_text_edit(message, state, async_session_local, bot)
    
    async def handle_time_edit_wrapper(query, state):
        return await handle_time_edit(query, state, async_session_local, bot)
    
    async def handle_time_edit_input_wrapper(message, state):
        return await handle_time_edit_input(message, state, async_session_local, bot)
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.callback_query.register(
        show_main_menu_wrapper,
        lambda c: c.data == "admin:main_menu"
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    dp.callback_query.register(
        handle_new_post_wrapper,
        lambda c: c.data == "admin:new_post"
    )
    
    # –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
    dp.callback_query.register(
        handle_posts_list_wrapper,
        lambda c: c.data == "admin:posts"
    )
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ—Å—Ç–æ–≤
    dp.callback_query.register(
        handle_posts_type_selection_wrapper,
        lambda c: c.data.startswith("posts_list:")
    )
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    dp.callback_query.register(
        handle_posts_pagination_wrapper,
        lambda c: c.data.startswith("posts_page:")
    )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
    dp.callback_query.register(
        handle_post_view_wrapper,
        lambda c: c.data.startswith("post_view:")
    )
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    dp.callback_query.register(
        handle_post_delete_wrapper,
        lambda c: c.data.startswith("post_delete:")
    )
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
    dp.callback_query.register(
        handle_post_publish_wrapper,
        lambda c: c.data.startswith("post_publish:")
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    dp.callback_query.register(
        handle_post_edit_wrapper,
        lambda c: c.data.startswith("post_edit:") and not c.data.startswith("post_edit_time:")
    )
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞
    dp.callback_query.register(
        handle_time_edit_wrapper,
        lambda c: c.data.startswith("post_edit_time:")
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è post_buttons:{id}, –Ω–µ –¥–ª—è post_buttons:add)
    dp.callback_query.register(
        handle_post_buttons_wrapper,
        lambda c: c.data.startswith("post_buttons:") and c.data.split(":")[1].isdigit()
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Å—Ç–æ–≤
    dp.callback_query.register(
        handle_post_add_media_wrapper,
        lambda c: c.data.startswith("post_add_media:")
    )
    
    dp.callback_query.register(
        handle_post_replace_media_wrapper,
        lambda c: c.data.startswith("post_replace_media:")
    )
    
    dp.callback_query.register(
        handle_post_remove_media_wrapper,
        lambda c: c.data.startswith("post_remove_media:")
    )
    
    dp.callback_query.register(
        handle_post_confirm_remove_media_wrapper,
        lambda c: c.data.startswith("post_confirm_remove_media:")
    )
    
    
    # –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    dp.callback_query.register(
        handle_antimat_wrapper,
        lambda c: c.data == "admin:antimat"
    )
    
    dp.callback_query.register(
        handle_antispam_wrapper,
        lambda c: c.data == "admin:antispam"
    )
    
    dp.callback_query.register(
        handle_settings_wrapper,
        lambda c: c.data == "admin:settings"
    )
    
    dp.callback_query.register(
        handle_status_wrapper,
        lambda c: c.data == "admin:status"
    )

    dp.callback_query.register(
        handle_stats_detailed_wrapper,
        lambda c: c.data == "admin:stats_detailed"
    )

    dp.callback_query.register(
        handle_stats_overall_wrapper,
        lambda c: c.data == "admin:stats_overall"
    )

    dp.callback_query.register(
        handle_stats_invites_wrapper,
        lambda c: c.data == "admin:stats_invites"
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    async def show_triggers_menu_wrapper(query, state):
        return await show_triggers_menu(query, state, async_session_local, bot)
    
    async def handle_trigger_add_wrapper(query, state):
        return await handle_trigger_add(query, state, async_session_local, bot)
    
    async def handle_trigger_toggle_wrapper(query, state):
        return await handle_trigger_toggle(query, state, async_session_local, bot)
    
    async def handle_trigger_delete_wrapper(query, state):
        return await handle_trigger_delete(query, state, async_session_local, bot)
    
    async def handle_triggers_pagination_wrapper(query, state):
        return await handle_triggers_pagination(query, state, async_session_local, bot)
    
    async def handle_trigger_text_input_wrapper(message, state):
        return await handle_trigger_text_input(message, state, async_session_local, bot)
    
    async def handle_trigger_response_input_wrapper(message, state):
        return await handle_response_text_input(message, state, async_session_local, bot)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    dp.callback_query.register(
        show_triggers_menu_wrapper,
        lambda c: c.data == "admin:triggers"
    )
    
    dp.callback_query.register(
        handle_trigger_add_wrapper,
        lambda c: c.data == "trigger_add"
    )
    
    dp.callback_query.register(
        handle_trigger_toggle_wrapper,
        lambda c: c.data.startswith("trigger_toggle:")
    )
    
    dp.callback_query.register(
        handle_trigger_delete_wrapper,
        lambda c: c.data.startswith("trigger_delete:")
    )
    
    dp.callback_query.register(
        handle_triggers_pagination_wrapper,
        lambda c: c.data.startswith("triggers_page:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    dp.message.register(
        handle_trigger_text_input_wrapper,
        TriggerStates.waiting_trigger_text,
        IsAdmin()
    )
    
    dp.message.register(
        handle_trigger_response_input_wrapper,
        TriggerStates.waiting_response_text,
        IsAdmin()
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    async def handle_admin_management_wrapper(query, state):
        from .admin_management import handle_admin_management
        return await handle_admin_management(query, state, async_session_local, bot)
    
    async def handle_admin_add_wrapper(query, state):
        from .admin_management import handle_admin_add
        return await handle_admin_add(query, state, async_session_local, bot)
    
    async def handle_admin_list_wrapper(query, state):
        from .admin_management import handle_admin_list
        return await handle_admin_list(query, state, async_session_local, bot)
    
    async def handle_admin_list_pagination_wrapper(query, state):
        from .admin_management import handle_admin_list_pagination
        return await handle_admin_list_pagination(query, state, async_session_local, bot)
    
    async def handle_admin_view_wrapper(query, state):
        from .admin_management import handle_admin_view
        return await handle_admin_view(query, state, async_session_local, bot)
    
    async def handle_admin_delete_wrapper(query, state):
        from .admin_management import handle_admin_delete
        return await handle_admin_delete(query, state, async_session_local, bot)
    
    async def handle_role_selection_wrapper(query, state):
        from .admin_management import handle_role_selection
        return await handle_role_selection(query, state, async_session_local, bot)
    
    async def handle_admin_id_input_wrapper(message, state):
        from .admin_management import handle_admin_id_input
        return await handle_admin_id_input(message, state, async_session_local, bot)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    dp.callback_query.register(
        handle_admin_management_wrapper,
        lambda c: c.data == "settings:admins"
    )
    
    dp.callback_query.register(
        handle_admin_add_wrapper,
        lambda c: c.data == "admin_management:add"
    )
    
    dp.callback_query.register(
        handle_admin_list_wrapper,
        lambda c: c.data == "admin_management:list"
    )
    
    dp.callback_query.register(
        handle_admin_list_pagination_wrapper,
        lambda c: c.data.startswith("admin_list_page:")
    )
    
    dp.callback_query.register(
        handle_admin_view_wrapper,
        lambda c: c.data.startswith("admin_view:")
    )
    
    dp.callback_query.register(
        handle_admin_delete_wrapper,
        lambda c: c.data.startswith("admin_delete:")
    )
    
    dp.callback_query.register(
        handle_role_selection_wrapper,
        lambda c: c.data.startswith("admin_role:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    dp.message.register(
        handle_admin_id_input_wrapper,
        AdminManagementStates.WAITING_ADMIN_ID,
        IsAdmin()
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤
    async def handle_topic_selection_wrapper(query, state):
        return await handle_topic_selection(query, state, async_session_local, bot)
    
    async def handle_time_selection_wrapper(query, state):
        return await handle_time_selection(query, state, async_session_local, bot)
    
    async def handle_media_selection_wrapper(query, state):
        return await handle_media_selection(query, state, async_session_local, bot)
    
    async def confirm_post_creation_wrapper(query, state):
        return await confirm_post_creation(query, state, async_session_local, bot)
    
    async def handle_back_navigation_wrapper(query, state):
        return await handle_back_navigation(query, state, async_session_local, bot)
    
    async def handle_manual_time_input_wrapper(message, state):
        return await handle_manual_time_input(message, state, async_session_local, bot)
    
    async def handle_text_input_wrapper(message, state):
        return await handle_text_input(message, state, async_session_local, bot)
    
    async def handle_media_input_wrapper(message, state):
        return await handle_media_input(message, state, async_session_local, bot)
    
    async def handle_media_input_for_existing_post_wrapper(message, state):
        from .post_editor import handle_media_input_for_existing_post
        return await handle_media_input_for_existing_post(message, state, async_session_local, bot)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤
    dp.callback_query.register(
        handle_topic_selection_wrapper,
        lambda c: c.data.startswith("post_editor:topic:")
    )
    
    dp.callback_query.register(
        handle_time_selection_wrapper,
        lambda c: c.data.startswith("post_editor:time:")
    )
    
    dp.callback_query.register(
        handle_media_selection_wrapper,
        lambda c: c.data.startswith("post_editor:media:")
    )
    
    dp.callback_query.register(
        confirm_post_creation_wrapper,
        lambda c: c.data == "post_editor:confirm"
    )
    
    dp.callback_query.register(
        handle_back_navigation_wrapper,
        lambda c: c.data.startswith("post_editor:back")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–¥–∏–∞
    dp.message.register(
        handle_manual_time_input_wrapper,
        PostEditorStates.CHOOSE_TIME,
        IsAdmin()
    )
    
    dp.message.register(
        handle_text_input_wrapper,
        PostEditorStates.WAITING_TEXT,
        IsAdmin()
    )
    
    dp.message.register(
        handle_media_input_wrapper,
        PostEditorStates.WAITING_MEDIA,
        IsAdmin()
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-–≤–≤–æ–¥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
    dp.message.register(
        handle_media_input_for_existing_post_wrapper,
        PostEditorStates.MEDIA_INPUT,
        IsAdmin()
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    dp.message.register(
        handle_text_edit_wrapper,
        PostEditorStates.EDITING_TEXT,
        IsAdmin()
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    dp.message.register(
        handle_time_edit_input_wrapper,
        PostEditorStates.EDITING_TIME,
        IsAdmin()
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
    
    async def handle_buttons_add_wrapper(query, state):
        return await handle_existing_post_button_add(query, state, async_session_local, bot)
    
    async def handle_button_delete_wrapper(query, state):
        return await handle_button_delete(query, state, async_session_local, bot)
    
    async def handle_button_text_input_wrapper(message, state):
        return await handle_button_text_input(message, state, async_session_local, bot)
    
    async def handle_button_url_input_wrapper(message, state):
        return await handle_button_url_input(message, state, async_session_local, bot)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∑–∞–≥–ª—É—à–µ–∫ (noop)
    async def handle_noop_wrapper(query, state):
        await safe_answer_callback(query)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø–æ—Å—Ç–∞
    async def handle_post_editor_buttons_wrapper(query, state):
        logger.info(f"üîç HANDLE_POST_EDITOR_BUTTONS: Starting post editor button handling")
        logger.info(f"üîç HANDLE_POST_EDITOR_BUTTONS: Callback data: '{query.data}'")
        logger.info(f"üîç HANDLE_POST_EDITOR_BUTTONS: User ID: {query.from_user.id}, Chat ID: {query.message.chat.id}")
        return await show_buttons_settings(query, state, async_session_local, bot)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø–æ—Å—Ç–∞
    async def handle_post_editor_add_button_wrapper(query, state):
        logger.info(f"üîç HANDLE_POST_EDITOR_ADD_BUTTON: Starting add button in post editor")
        logger.info(f"üîç HANDLE_POST_EDITOR_ADD_BUTTON: Callback data: '{query.data}'")
        return await handle_buttons_add(query, state, async_session_local, bot)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
    dp.callback_query.register(
        handle_post_editor_buttons_wrapper,
        lambda c: c.data == "post_editor:buttons"
    )
    
    dp.callback_query.register(
        handle_post_editor_add_button_wrapper,
        lambda c: c.data == "post_editor:add_button"
    )
    
    dp.callback_query.register(
        handle_buttons_add_wrapper,
        lambda c: c.data == "post_buttons:add"
    )
    
    dp.callback_query.register(
        handle_button_delete_wrapper,
        lambda c: c.data.startswith("post_button:delete:")
    )
    
    dp.callback_query.register(
        handle_noop_wrapper,
        lambda c: c.data == "noop"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    dp.message.register(
        handle_button_text_input_wrapper,
        PostEditorStates.WAITING_BUTTON_TEXT,
        IsAdmin()
    )
    
    dp.message.register(
        handle_button_url_input_wrapper,
        PostEditorStates.WAITING_BUTTON_URL,
        IsAdmin()
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    from .antispam_settings import (
        AntispamSettingsStates,
        handle_antispam_toggle,
        handle_antispam_edit_limit,
        handle_antispam_edit_window,
        handle_limit_input,
        handle_window_input,
        show_antispam_settings
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    dp.callback_query.register(
        make_antispam_handler(handle_antispam_toggle),
        lambda c: c.data == "antispam:toggle",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antispam_handler(handle_antispam_edit_limit),
        lambda c: c.data == "antispam:edit_limit",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antispam_handler(handle_antispam_edit_window),
        lambda c: c.data == "antispam:edit_window",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antispam_handler(show_antispam_settings),
        lambda c: c.data == "antispam:view",
        IsAdmin()
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    dp.message.register(
        make_antispam_message_handler(handle_limit_input),
        AntispamSettingsStates.WAITING_LIMIT,
        IsAdmin()
    )
    
    dp.message.register(
        make_antispam_message_handler(handle_window_input),
        AntispamSettingsStates.WAITING_WINDOW,
        IsAdmin()
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–Ω—Ç–∏–º–∞—Ç–∞
    from .antimat_settings import (
        AntimatSettingsStates,
        handle_antimat_toggle,
        handle_antimat_toggle_warnings,
        handle_antimat_add_word,
        handle_antimat_remove_word,
        handle_antimat_add_link,
        handle_antimat_remove_link,
        handle_add_word_input,
        handle_add_link_input,
        handle_remove_word_callback,
        handle_remove_link_callback,
        handle_antimat_clear_all,
        show_antimat_settings,
        show_antimat_words,
        show_antimat_links,
        handle_manage_words,
        handle_manage_links,
        handle_remove_word_inline,
        handle_remove_link_inline,
        handle_clear_words,
        handle_clear_links,
        handle_words_pagination,
        handle_links_pagination
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query –¥–ª—è –∞–Ω—Ç–∏–º–∞—Ç–∞
    dp.callback_query.register(
        make_antimat_handler(handle_antimat_toggle),
        lambda c: c.data == "antimat:toggle",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_antimat_toggle_warnings),
        lambda c: c.data == "antimat:toggle_warnings",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_antimat_add_word),
        lambda c: c.data == "antimat:add_word",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_antimat_remove_word),
        lambda c: c.data == "antimat:remove_word",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_antimat_add_link),
        lambda c: c.data == "antimat:add_link",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_antimat_remove_link),
        lambda c: c.data == "antimat:remove_link",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_remove_word_callback),
        lambda c: c.data.startswith("antimat:remove_word:"),
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_remove_link_callback),
        lambda c: c.data.startswith("antimat:remove_link:"),
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_antimat_clear_all),
        lambda c: c.data == "antimat:clear_all",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_manage_words),
        lambda c: c.data == "antimat:manage_words",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_manage_links),
        lambda c: c.data == "antimat:manage_links",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_remove_word_inline),
        lambda c: c.data.startswith("antimat:remove_word_inline:"),
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_remove_link_inline),
        lambda c: c.data.startswith("antimat:remove_link_inline:"),
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_clear_words),
        lambda c: c.data == "antimat:clear_words",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_clear_links),
        lambda c: c.data == "antimat:clear_links",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(show_antimat_settings),
        lambda c: c.data == "antimat:view",
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_words_pagination),
        lambda c: c.data.startswith("antimat:words_page:"),
        IsAdmin()
    )
    
    dp.callback_query.register(
        make_antimat_handler(handle_links_pagination),
        lambda c: c.data.startswith("antimat:links_page:"),
        IsAdmin()
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω—Ç–∏–º–∞—Ç–∞
    dp.message.register(
        make_antimat_message_handler(handle_add_word_input),
        AntimatSettingsStates.ADD_WORD,
        IsAdmin()
    )
    
    dp.message.register(
        make_antimat_message_handler(handle_add_link_input),
        AntimatSettingsStates.ADD_LINK,
        IsAdmin()
    )
    
    logger.info("‚úÖ Admin panel handlers registered")
