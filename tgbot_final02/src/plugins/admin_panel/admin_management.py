"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
"""

import logging
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from sqlalchemy.future import select
from sqlalchemy import func

from models.base import Admin, User
from .message_utils import edit_message, process_user_input
from .settings_keyboards import (
    get_admin_management_keyboard,
    get_admin_list_keyboard,
    get_admin_actions_keyboard,
    get_admin_add_keyboard
)

logger = logging.getLogger(__name__)


async def safe_answer_callback(query: CallbackQuery):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query"""
    try:
        await query.answer()
    except Exception as e:
        logger.debug(f"Failed to answer callback query: {e}")


async def get_admins_list(async_session_local: async_sessionmaker):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    from config import get_settings
    settings = get_settings()
    
    async with async_session_local() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        result = await session.execute(
            select(Admin, User).join(User, Admin.telegram_id == User.telegram_id, isouter=True)
        )
        
        admins = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
        for admin, user in result:
            admins.append({
                'telegram_id': admin.telegram_id,
                'role': admin.role,
                'username': user.username if user else None,
                'first_name': user.first_name if user else None,
                'source': 'db'  # –ò—Å—Ç–æ—á–Ω–∏–∫: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for config_admin_id in settings.ADMINS:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–¥–º–∏–Ω –∏–∑ –ë–î
            if not any(admin['telegram_id'] == config_admin_id for admin in admins):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
                user_result = await session.execute(
                    select(User).filter_by(telegram_id=config_admin_id)
                )
                user = user_result.scalar_one_or_none()
                
                admins.append({
                    'telegram_id': config_admin_id,
                    'role': 'super_admin',
                    'username': user.username if user else None,
                    'first_name': user.first_name if user else None,
                    'source': 'config'  # –ò—Å—Ç–æ—á–Ω–∏–∫: –∫–æ–Ω—Ñ–∏–≥
                })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É (config –ø–µ—Ä–≤—ã–µ), –∑–∞—Ç–µ–º –ø–æ telegram_id
    admins.sort(key=lambda x: (x['source'] != 'config', x['telegram_id']))
    
    return admins


class AdminManagementStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    WAITING_ADMIN_ID = State()


async def handle_settings_menu(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await safe_answer_callback(query)
    
    from .settings_keyboards import get_settings_menu_keyboard
    
    text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    keyboard = get_settings_menu_keyboard()
    
    await edit_message(query, text, keyboard, "HTML", bot)


async def handle_admin_management(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    await safe_answer_callback(query)
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_admin_management_keyboard()
    
    await edit_message(query, text, keyboard, "HTML", bot)


async def handle_admin_add(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await safe_answer_callback(query)
    
    text = ("‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ 123456789)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 123456789 (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n"
            "‚Ä¢ @username (username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    
    keyboard = get_admin_add_keyboard()
    
    message_id = await edit_message(query, text, keyboard, "HTML", bot)
    if message_id:
        await state.update_data(last_message_id=message_id)
    await state.set_state(AdminManagementStates.WAITING_ADMIN_ID)


async def handle_admin_id_input(message: Message, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID/username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_input = message.text.strip()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = None
        telegram_id = None
        
        if admin_input.startswith('@'):
            # –≠—Ç–æ username - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
            username = admin_input[1:]  # –£–±–∏—Ä–∞–µ–º @
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ username
            async with async_session_local() as session:
                user_result = await session.execute(
                    select(User).filter_by(username=username)
                )
                user = user_result.scalar_one_or_none()
                
                if not user:
                    await process_user_input(
                        bot=bot,
                        message=message,
                        text=f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                             f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∫–∞–ø—á—É –≤ —á–∞—Ç–µ.",
                        reply_markup=get_admin_management_keyboard(),
                        state=state
                    )
                    return
                
                telegram_id = user.telegram_id
        else:
            # –≠—Ç–æ ID - –ù–ï —Ç—Ä–µ–±—É–µ–º –Ω–∞–ª–∏—á–∏—è –≤ –ë–î
            try:
                telegram_id = int(admin_input)
            except ValueError:
                await process_user_input(
                    bot=bot,
                    message=message,
                    text="‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                         "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    reply_markup=get_admin_management_keyboard(),
                    state=state
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        async with async_session_local() as session:
            result = await session.execute(
                select(Admin).filter_by(telegram_id=telegram_id)
            )
            existing_admin = result.scalar_one_or_none()
            
            if existing_admin:
                await process_user_input(
                    bot=bot,
                    message=message,
                    text=f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å —Ä–æ–ª—å—é '{existing_admin.role}'.",
                    reply_markup=get_admin_management_keyboard(),
                    state=state
                )
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î (–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ–º –µ—ë –Ω–∞–ª–∏—á–∏—è –¥–ª—è ID)
            user = None
            if not admin_input.startswith('@'):
                user_result = await session.execute(
                    select(User).filter_by(telegram_id=telegram_id)
                )
                user = user_result.scalar_one_or_none()
                # –î–ª—è ID –Ω–µ —Ç—Ä–µ–±—É–µ–º –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        
        # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–æ–ª—å—é 'admin'
        try:
            async with async_session_local() as session:
                new_admin = Admin(
                    telegram_id=telegram_id,
                    role='admin'
                )
                session.add(new_admin)
                await session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            if user and user.username:
                username_display = f"@{user.username}"
            elif user and user.first_name:
                username_display = user.first_name
            else:
                username_display = "–ù–µ —É–∫–∞–∑–∞–Ω (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
            
            success_text = (f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                           f"üë§ ID: {telegram_id}\n"
                           f"üë§ Username: {username_display}\n"
                           f"üé≠ –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                           f"<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –±–æ—Ç–µ.</i>")
            
            await process_user_input(
                bot=bot,
                message=message,
                text=success_text,
                reply_markup=get_admin_management_keyboard(),
                state=state
            )
            
            logger.info(f"Admin {telegram_id} added with role admin by {message.from_user.id}")
            
        except Exception as add_error:
            logger.error(f"Error adding admin: {add_error}")
            await process_user_input(
                bot=bot,
                message=message,
                text="‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_admin_management_keyboard(),
                state=state
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing admin ID input: {e}")
        await process_user_input(
            bot=bot,
            message=message,
            text="‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=get_admin_management_keyboard(),
            state=state
        )






async def handle_admin_list(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    await safe_answer_callback(query)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await get_admins_list(async_session_local)
        
        if not admins:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            keyboard = get_admin_management_keyboard()
        else:
            text = f"üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
            keyboard = get_admin_list_keyboard(admins, page=0)
        
        await edit_message(query, text, keyboard, "HTML", bot)
        
    except Exception as e:
        logger.error(f"Error getting admin list: {e}")
        error_text = "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        await edit_message(query, error_text, get_admin_management_keyboard(), "HTML", bot)


async def handle_admin_list_pagination(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(query.data.split(":")[1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await get_admins_list(async_session_local)
        
        text = f"üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
        keyboard = get_admin_list_keyboard(admins, page=page)
        
        await edit_message(query, text, keyboard, "HTML", bot)
        
    except Exception as e:
        logger.error(f"Error paginating admin list: {e}")
        error_text = "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        await edit_message(query, error_text, get_admin_management_keyboard(), "HTML", bot)


async def handle_admin_view(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = int(query.data.split(":")[1])
    
    try:
        from config import get_settings
        settings = get_settings()
        
        async with async_session_local() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            is_config_admin = admin_id in settings.ADMINS
            
            if is_config_admin:
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                user_result = await session.execute(
                    select(User).filter_by(telegram_id=admin_id)
                )
                user = user_result.scalar_one_or_none()
                
                admin_text = (f"üëë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ</b>\n\n"
                             f"üÜî ID: {admin_id}\n"
                             f"üë§ Username: @{user.username if user and user.username else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                             f"üìù –ò–º—è: {user.first_name if user and user.first_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                             f"üé≠ –†–æ–ª—å: –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)\n"
                             f"üîí –°—Ç–∞—Ç—É—Å: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")
                
                # –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                keyboard = get_admin_actions_keyboard(admin_id, query.from_user.id, can_delete=False)
                
            else:
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑ –ë–î
                result = await session.execute(
                    select(Admin, User).join(User, Admin.telegram_id == User.telegram_id, isouter=True)
                    .filter(Admin.telegram_id == admin_id)
                )
                
                admin_data = result.first()
                if not admin_data:
                    error_text = "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    await edit_message(query, error_text, get_admin_management_keyboard(), "HTML", bot)
                    return
                
                admin, user = admin_data
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
                role_names = {
                    'super_admin': '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω',
                    'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'
                }
                
                role_emojis = {
                    'super_admin': 'üëë',
                    'admin': 'üë§',
                    'moderator': 'üõ°Ô∏è'
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                if user:
                    username_display = f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    name_display = user.first_name if user.first_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    info_status = "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞"
                else:
                    username_display = "–ù–µ —É–∫–∞–∑–∞–Ω (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
                    name_display = "–ù–µ —É–∫–∞–∑–∞–Ω–æ (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
                    info_status = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                
                admin_text = (f"{role_emojis.get(admin.role, 'üë§')} <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ</b>\n\n"
                             f"üÜî ID: {admin.telegram_id}\n"
                             f"üë§ Username: {username_display}\n"
                             f"üìù –ò–º—è: {name_display}\n"
                             f"üé≠ –†–æ–ª—å: {role_names.get(admin.role, admin.role)}\n"
                             f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n"
                             f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {info_status}")
                
                keyboard = get_admin_actions_keyboard(admin_id, query.from_user.id, can_delete=True)
            
            await edit_message(query, admin_text, keyboard, "HTML", bot)
            
    except Exception as e:
        logger.error(f"Error viewing admin: {e}")
        error_text = "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ."
        await edit_message(query, error_text, get_admin_management_keyboard(), "HTML", bot)


async def handle_admin_delete(query: CallbackQuery, state: FSMContext, async_session_local: async_sessionmaker, bot: Bot):
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await safe_answer_callback(query)
    
    # –ü–∞—Ä—Å–∏–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = int(query.data.split(":")[1])
    
    try:
        from config import get_settings
        settings = get_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if admin_id in settings.ADMINS:
            error_text = "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."
            await edit_message(query, error_text, get_admin_management_keyboard(), "HTML", bot)
            return
        
        async with async_session_local() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
            result = await session.execute(
                select(Admin).filter_by(telegram_id=admin_id)
            )
            admin = result.scalar_one_or_none()
            
            if not admin:
                error_text = "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
                await edit_message(query, error_text, get_admin_management_keyboard(), "HTML", bot)
                return
            
            # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await session.delete(admin)
            await session.commit()
            
            success_text = (f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!</b>\n\n"
                           f"ID: {admin_id}\n"
                           f"–†–æ–ª—å: {admin.role}")
            
            await edit_message(query, success_text, get_admin_management_keyboard(), "HTML", bot)
            
            logger.info(f"Admin {admin_id} deleted by {query.from_user.id}")
            
    except Exception as e:
        logger.error(f"Error deleting admin: {e}")
        error_text = "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        await edit_message(query, error_text, get_admin_management_keyboard(), "HTML", bot)
