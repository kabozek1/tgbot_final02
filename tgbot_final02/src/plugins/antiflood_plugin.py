from aiogram import Dispatcher, F
from aiogram.types import Message, TelegramObject
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram import BaseMiddleware
from collections import deque
import time
import asyncio
import logging
from typing import Callable, Dict, Any, Awaitable
from sqlalchemy.ext.asyncio import async_sessionmaker

from utils.plugin_settings import load_plugin_settings

logger = logging.getLogger(__name__)

# In-memory storage for flood control
flood_control = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∏–∑ –ë–î)
ANTISPAM_ENABLED = True
ANTISPAM_MAX_MESSAGES = 5
ANTISPAM_WINDOW_SECONDS = 10


async def initialize_antispam_settings(async_session_local: async_sessionmaker):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –∏–∑ –ë–î"""
    global ANTISPAM_ENABLED, ANTISPAM_MAX_MESSAGES, ANTISPAM_WINDOW_SECONDS
    
    logger.info(f"üîç DEBUG: initialize_antispam_settings called with async_session_local type={type(async_session_local)}")
    
    try:
        settings = await load_plugin_settings("antispam", async_session_local)
        ANTISPAM_ENABLED = settings.get("enabled", True)
        ANTISPAM_MAX_MESSAGES = settings.get("max_messages", 5)
        ANTISPAM_WINDOW_SECONDS = settings.get("window_seconds", 10)
        
        logger.info(f"‚úÖ Antispam settings initialized: enabled={ANTISPAM_ENABLED}, max_messages={ANTISPAM_MAX_MESSAGES}, window_seconds={ANTISPAM_WINDOW_SECONDS}")
    except Exception as e:
        logger.error(f"‚ùå Error initializing antispam settings: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ANTISPAM_ENABLED = True
        ANTISPAM_MAX_MESSAGES = 5
        ANTISPAM_WINDOW_SECONDS = 10


def get_antispam_config():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
    return {
        "enabled": ANTISPAM_ENABLED,
        "max_messages": ANTISPAM_MAX_MESSAGES,
        "window_seconds": ANTISPAM_WINDOW_SECONDS
    }


async def sync_antispam_settings(async_session_local: async_sessionmaker):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ —Å –ë–î"""
    global ANTISPAM_ENABLED, ANTISPAM_MAX_MESSAGES, ANTISPAM_WINDOW_SECONDS
    
    logger.info(f"üîç DEBUG: sync_antispam_settings called with async_session_local type={type(async_session_local)}")
    
    try:
        settings = await load_plugin_settings("antispam", async_session_local)
        ANTISPAM_ENABLED = settings.get("enabled", True)
        ANTISPAM_MAX_MESSAGES = settings.get("max_messages", 5)
        ANTISPAM_WINDOW_SECONDS = settings.get("window_seconds", 10)
        
        logger.info(f"‚úÖ Antispam settings synced: enabled={ANTISPAM_ENABLED}, max_messages={ANTISPAM_MAX_MESSAGES}, window_seconds={ANTISPAM_WINDOW_SECONDS}")
    except Exception as e:
        logger.error(f"‚ùå Error syncing antispam settings: {e}")

def is_flooding(message: Message) -> bool:
    """Checks if a user is flooding. Has side effects on flood_control dict."""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_antispam_config()
    
    logger.info(f"üîç ANTIFLOOD_CHECK: Checking message from user {message.from_user.id} in chat {message.chat.id}")
    logger.info(f"üîç ANTIFLOOD_CONFIG: enabled={config['enabled']}, max_messages={config['max_messages']}, window_seconds={config['window_seconds']}")
    
    # –ï—Å–ª–∏ –∞–Ω—Ç–∏—Å–ø–∞–º –≤—ã–∫–ª—é—á–µ–Ω, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
    if not config["enabled"]:
        logger.info(f"üîç ANTIFLOOD_DISABLED: Antispam is disabled, allowing message")
        return False
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    current_time = time.time()
    
    key = (chat_id, user_id)
    
    if key not in flood_control:
        flood_control[key] = deque()
    
    flood_control[key].append(current_time)
    
    # Remove timestamps older than window_seconds
    window_seconds = config["window_seconds"]
    while flood_control[key] and current_time - flood_control[key][0] > window_seconds:
        flood_control[key].popleft()
    
    # Return True if user exceeded message limit
    max_messages = config["max_messages"]
    message_count = len(flood_control[key])
    is_flood = message_count > max_messages
    
    logger.info(f"üîç ANTIFLOOD_RESULT: User {user_id} has {message_count} messages in {window_seconds}s window (max: {max_messages}), flooding: {is_flood}")
    
    return is_flood

class AntifloodMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞."""
    
    def __init__(self):
        super().__init__()
        
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ middleware."""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not isinstance(event, Message):
            return await handler(event, data)
            
        message = event
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.text:
            return await handler(event, data)
            
        logger.info(f"üîç ANTIFLOOD_MIDDLEWARE: Checking message {message.message_id} from user {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–ª—É–¥
        if is_flooding(message):
            logger.info(f"üö´ ANTIFLOOD_MIDDLEWARE: Flood detected for user {message.from_user.id}")
            await self.handle_flood_message(message)
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            
        logger.info(f"‚úÖ ANTIFLOOD_MIDDLEWARE: Message {message.message_id} passed flood check")
        return await handler(event, data)
        
    async def handle_flood_message(self, message: Message):
        """Handle flood message."""
        try:
            user_id = message.from_user.id
            chat_id = message.chat.id
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.delete()
            except (TelegramBadRequest, TelegramForbiddenError):
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            warning_msg = await message.answer(
                f"‚ö†Ô∏è {message.from_user.first_name}, –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            async def delete_warning():
                await asyncio.sleep(5)
                try:
                    await warning_msg.delete()
                except (TelegramBadRequest, TelegramForbiddenError):
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            
            asyncio.create_task(delete_warning())
            
        except Exception as e:
            logger.error(f"Unexpected antiflood error: {e}")

def register(dp: Dispatcher, bot, async_session_local: async_sessionmaker):
    """Register antiflood plugin middleware."""
    logger.info(f"üîç DEBUG: antiflood_plugin.register called with async_session_local type={type(async_session_local)}")
    logger.info(f"üîç DEBUG: bot type={type(bot)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.create_task(initialize_antispam_settings(async_session_local))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞
    dp.message.middleware(AntifloodMiddleware())
    logger.info("‚úÖ Antiflood middleware registered")
