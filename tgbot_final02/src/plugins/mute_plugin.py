import asyncio
import re
import logging
import sys
from datetime import datetime, timedelta
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ChatPermissions
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from sqlalchemy.ext.asyncio import async_sessionmaker
from config import get_settings
from utils.admin_utils import is_user_admin

# Force logging configuration for this module
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [%(levelname)s] [%(name)s] %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)],
    force=True
)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.info("üîß MUTE_PLUGIN: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")


async def delete_command_message(message: Message):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        await message.delete()
    except (TelegramBadRequest, TelegramForbiddenError):
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è


async def send_and_auto_delete(message: Message, text: str, delay: int = 3):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        sent_message = await message.answer(text)
        await asyncio.sleep(delay)
        await sent_message.delete()
    except (TelegramBadRequest, TelegramForbiddenError):
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è


async def delete_system_message_after_delay(sent_message: Message, delay: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    await asyncio.sleep(delay)
    try:
        await sent_message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è


async def save_user_to_db(user_id, username, first_name, async_session_local, search_username):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if async_session_local:
        try:
            from models.base import User
            from sqlalchemy.future import select
            async with async_session_local() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                result = await session.execute(
                    select(User).where(User.telegram_id == user_id)
                )
                existing_user = result.scalar_one_or_none()
                
                if not existing_user:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_user = User(
                        telegram_id=user_id,
                        username=username,
                        first_name=first_name
                    )
                    session.add(new_user)
                    await session.commit()
                    logger.info(f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{search_username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    existing_user.username = username
                    existing_user.first_name = first_name
                    await session.commit()
                    logger.info(f"üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{search_username} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î")
        except Exception as db_e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {db_e}")


async def extract_user_info(message: Message, bot=None, async_session_local=None):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞:
    1. @username —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±)
    2. Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (user_id, username) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
    """
    
    logger.info(f"üîç extract_user_info –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {message.from_user.username or message.from_user.first_name}")
    logger.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
    
    # –°–ø–æ—Å–æ–± 1: @username –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±)
    if message.text:
        # –ò—â–µ–º @username –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã
        username_match = re.search(r'@(\w+)', message.text)
        if username_match:
            username = username_match.group(1)
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω username –≤ —Ç–µ–∫—Å—Ç–µ: @{username}")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ username
            if async_session_local:
                try:
                    from sqlalchemy.future import select
                    from models.base import User
                    
                    logger.info(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                    async with async_session_local() as session:
                        result = await session.execute(
                            select(User).where(User.username == username)
                        )
                        user = result.scalar_one_or_none()
                        if user:
                            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {user.username} (telegram_id: {user.telegram_id})")
                            return user.telegram_id, user.username or user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        else:
                            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î: {e}")
            else:
                logger.warning("‚ùå async_session_local –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            if bot:
                try:
                    logger.info(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞...")
                    
                    # –ü—Ä–æ–±—É–µ–º —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    chat_admins = await bot.get_chat_administrators(message.chat.id)
                    for admin in chat_admins:
                        if admin.user.username and admin.user.username.lower() == username.lower():
                            user_id = admin.user.id
                            user_name = admin.user.username or admin.user.first_name
                            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: @{username} (ID: {user_id})")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                            await save_user_to_db(user_id, admin.user.username, admin.user.first_name, async_session_local, username)
                            return user_id, user_name
                    
                    logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                    
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –≤ –ë–î, –Ω–∏ —á–µ—Ä–µ–∑ API
            logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None, username
    
    # –°–ø–æ—Å–æ–± 2: Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ @username –Ω–µ –Ω–∞–π–¥–µ–Ω)
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º reply_to_message: {message.reply_to_message is not None}")
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–µ—Ä–µ–∑ reply: {target_user.username or target_user.first_name} (ID: {target_user.id})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        if target_user.username:
            await save_user_to_db(target_user.id, target_user.username, target_user.first_name, async_session_local, target_user.username)
        
        return target_user.id, target_user.username or target_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not message.text:
        logger.info("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        logger.info("‚ùå Username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    logger.info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    return None, None


# –§—É–Ω–∫—Ü–∏—è is_user_admin —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ utils.admin_utils


def register(dp: Dispatcher, bot, async_session_local: async_sessionmaker):
    """Register mute plugin handlers."""
    
    async def mute_command(message: Message):
        """Mute user by replying to their message or using @username."""
        
        logger.info(f"üéØ –ö–æ–º–∞–Ω–¥–∞ mute –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username or message.from_user.first_name} (ID: {message.from_user.id})")
        logger.info(f"üìù –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã: {message.text}")
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await delete_command_message(message)
        
        # Get settings for message delete delay
        settings = get_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—ã
        if not await is_user_admin(message, message.from_user.id, async_session_local):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await send_and_auto_delete(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", settings.MUTE_MESSAGE_DELETE_DELAY)
            return
        
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        logger.info("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        user_id, username = await extract_user_info(message, bot, async_session_local)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç extract_user_info: user_id={user_id}, username={username}")
        
        if not user_id:
            logger.warning("‚ùå user_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
            if username:
                await send_and_auto_delete(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", settings.MUTE_MESSAGE_DELETE_DELAY)
            else:
                await send_and_auto_delete(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username.", settings.MUTE_MESSAGE_DELETE_DELAY)
            return
        
        # Check if user is admin (can't mute admins)
        if await is_user_admin(message, user_id, async_session_local):
            await send_and_auto_delete(message, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–º—å—é—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", settings.MUTE_MESSAGE_DELETE_DELAY)
            return
        
        # Parse mute duration
        command_args = message.text.split()
        mute_minutes = 10  # Default 10 minutes
        
        # –ò—â–µ–º –≤—Ä–µ–º—è –º—É—Ç–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
        for arg in command_args[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
            if not arg.startswith('@'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º @username
                try:
                    mute_minutes = int(arg)
                    if mute_minutes <= 0:
                        await send_and_auto_delete(message, "‚ùå –í—Ä–µ–º—è –º—É—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç.", settings.MUTE_MESSAGE_DELETE_DELAY)
                        return
                    break
                except ValueError:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        
        # Create restricted permissions (no sending messages)
        restricted_permissions = ChatPermissions(
            can_send_messages=False,
            can_send_media_messages=False,
            can_send_polls=False,
            can_send_other_messages=False,
            can_add_web_page_previews=False,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False
        )
        
        try:
            # Apply mute
            await message.bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=user_id,
                permissions=restricted_permissions,
                until_date=None  # Permanent mute
            )
            
            await send_and_auto_delete(message, f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {mute_minutes} –º–∏–Ω—É—Ç.", settings.MUTE_MESSAGE_DELETE_DELAY)
            
            # Schedule unmute after specified time
            if mute_minutes > 0:
                # Restore normal permissions after mute time
                normal_permissions = ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False
                )
                
                # Wait for mute duration
                await asyncio.sleep(mute_minutes * 60)
                
                # Unmute user
                try:
                    await message.bot.restrict_chat_member(
                        chat_id=message.chat.id,
                        user_id=user_id,
                        permissions=normal_permissions,
                        until_date=None
                    )
                    await send_and_auto_delete(message, f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–º—å—é—á–µ–Ω.", settings.MUTE_MESSAGE_DELETE_DELAY)
                except Exception:
                    pass  # Ignore errors when unmuting
                    
        except (TelegramBadRequest, TelegramForbiddenError) as e:
            await send_and_auto_delete(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", settings.MUTE_MESSAGE_DELETE_DELAY)
        except Exception as e:
            await send_and_auto_delete(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}", settings.MUTE_MESSAGE_DELETE_DELAY)
    
    async def unmute_command(message: Message):
        """Unmute user by replying to their message or using @username."""
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await delete_command_message(message)
        
        # Get settings for message delete delay
        settings = get_settings()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥—ã
        if not await is_user_admin(message, message.from_user.id, async_session_local):
            await send_and_auto_delete(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", settings.MUTE_MESSAGE_DELETE_DELAY)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id, username = await extract_user_info(message, bot, async_session_local)
        
        if not user_id:
            if username:
                await send_and_auto_delete(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", settings.MUTE_MESSAGE_DELETE_DELAY)
            else:
                await send_and_auto_delete(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username.", settings.MUTE_MESSAGE_DELETE_DELAY)
            return
        
        # Check if user is admin (can't unmute admins)
        if await is_user_admin(message, user_id, async_session_local):
            await send_and_auto_delete(message, "‚ùå –ù–µ–ª—å–∑—è —Ä–∞–∑–º—å—é—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", settings.MUTE_MESSAGE_DELETE_DELAY)
            return
        
        # Create normal permissions (restore all messaging rights)
        normal_permissions = ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_polls=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False
        )
        
        try:
            # Apply unmute
            await message.bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=user_id,
                permissions=normal_permissions,
                until_date=None
            )
            
            await send_and_auto_delete(message, f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–º—å—é—á–µ–Ω.", settings.MUTE_MESSAGE_DELETE_DELAY)
                    
        except (TelegramBadRequest, TelegramForbiddenError) as e:
            await send_and_auto_delete(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", settings.MUTE_MESSAGE_DELETE_DELAY)
        except Exception as e:
            await send_and_auto_delete(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}", settings.MUTE_MESSAGE_DELETE_DELAY)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(mute_command, Command("mute"))
    dp.message.register(unmute_command, Command("unmute"))